
freeRtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b50  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08002c90  08002c90  00012c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002d64  08002d64  00012d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000dfc  20000070  08002dd8  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000e6c  08002dd8  00020e6c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016de5  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e7a  00000000  00000000  00036e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007a71  00000000  00000000  00039cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000aa8  00000000  00000000  00041770  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001010  00000000  00000000  00042218  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000615a  00000000  00000000  00043228  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004632  00000000  00000000  00049382  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004d9b4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000212c  00000000  00000000  0004da30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08002c78 	.word	0x08002c78

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08002c78 	.word	0x08002c78

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000190:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000192:	2003      	movs	r0, #3
 8000194:	f000 f816 	bl	80001c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000198:	2000      	movs	r0, #0
 800019a:	f002 f87d 	bl	8002298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800019e:	f002 f805 	bl	80021ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80001a2:	2000      	movs	r0, #0
 80001a4:	bd08      	pop	{r3, pc}
	...

080001a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001a8:	4a02      	ldr	r2, [pc, #8]	; (80001b4 <HAL_IncTick+0xc>)
 80001aa:	6813      	ldr	r3, [r2, #0]
 80001ac:	3301      	adds	r3, #1
 80001ae:	6013      	str	r3, [r2, #0]
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	20000de4 	.word	0x20000de4

080001b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001b8:	4b01      	ldr	r3, [pc, #4]	; (80001c0 <HAL_GetTick+0x8>)
 80001ba:	6818      	ldr	r0, [r3, #0]
}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	20000de4 	.word	0x20000de4

080001c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001c4:	4a07      	ldr	r2, [pc, #28]	; (80001e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001c6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001c8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ca:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001d2:	041b      	lsls	r3, r3, #16
 80001d4:	0c1b      	lsrs	r3, r3, #16
 80001d6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001de:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001e0:	60d3      	str	r3, [r2, #12]
 80001e2:	4770      	bx	lr
 80001e4:	e000ed00 	.word	0xe000ed00

080001e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001e8:	4b17      	ldr	r3, [pc, #92]	; (8000248 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80001ea:	b530      	push	{r4, r5, lr}
 80001ec:	68dc      	ldr	r4, [r3, #12]
 80001ee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001f2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001f6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001f8:	2b04      	cmp	r3, #4
 80001fa:	bf28      	it	cs
 80001fc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001fe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000200:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000204:	bf98      	it	ls
 8000206:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000208:	fa05 f303 	lsl.w	r3, r5, r3
 800020c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000210:	bf88      	it	hi
 8000212:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000214:	4019      	ands	r1, r3
 8000216:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000218:	fa05 f404 	lsl.w	r4, r5, r4
 800021c:	3c01      	subs	r4, #1
 800021e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000220:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000222:	ea42 0201 	orr.w	r2, r2, r1
 8000226:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022a:	bfaf      	iteee	ge
 800022c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000230:	4b06      	ldrlt	r3, [pc, #24]	; (800024c <HAL_NVIC_SetPriority+0x64>)
 8000232:	f000 000f 	andlt.w	r0, r0, #15
 8000236:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000238:	bfa5      	ittet	ge
 800023a:	b2d2      	uxtbge	r2, r2
 800023c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000240:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000246:	bd30      	pop	{r4, r5, pc}
 8000248:	e000ed00 	.word	0xe000ed00
 800024c:	e000ed14 	.word	0xe000ed14

08000250 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000250:	2301      	movs	r3, #1
 8000252:	0942      	lsrs	r2, r0, #5
 8000254:	f000 001f 	and.w	r0, r0, #31
 8000258:	fa03 f000 	lsl.w	r0, r3, r0
 800025c:	4b01      	ldr	r3, [pc, #4]	; (8000264 <HAL_NVIC_EnableIRQ+0x14>)
 800025e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000262:	4770      	bx	lr
 8000264:	e000e100 	.word	0xe000e100

08000268 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000268:	3801      	subs	r0, #1
 800026a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800026e:	d20a      	bcs.n	8000286 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	4a06      	ldr	r2, [pc, #24]	; (8000290 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000276:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800027c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800027e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000280:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000286:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	e000e010 	.word	0xe000e010
 8000290:	e000ed00 	.word	0xe000ed00

08000294 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000294:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000296:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	bf0c      	ite	eq
 800029c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002a0:	f022 0204 	bicne.w	r2, r2, #4
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	4770      	bx	lr
 80002a8:	e000e010 	.word	0xe000e010

080002ac <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 80002ac:	2300      	movs	r3, #0
{ 
 80002ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80002b2:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002b6:	f8df 9194 	ldr.w	r9, [pc, #404]	; 800044c <HAL_GPIO_Init+0x1a0>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80002ba:	4a62      	ldr	r2, [pc, #392]	; (8000444 <HAL_GPIO_Init+0x198>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80002bc:	fa38 f403 	lsrs.w	r4, r8, r3
 80002c0:	d102      	bne.n	80002c8 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  } 
}
 80002c2:	b003      	add	sp, #12
 80002c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80002c8:	f04f 0e01 	mov.w	lr, #1
 80002cc:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 80002d0:	ea18 060e 	ands.w	r6, r8, lr
 80002d4:	f000 80a8 	beq.w	8000428 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80002d8:	684c      	ldr	r4, [r1, #4]
 80002da:	f024 0710 	bic.w	r7, r4, #16
 80002de:	2f02      	cmp	r7, #2
 80002e0:	d116      	bne.n	8000310 <HAL_GPIO_Init+0x64>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80002e2:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3];
 80002e6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80002ea:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80002ee:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80002f2:	f8da 5020 	ldr.w	r5, [sl, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80002f6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80002fa:	fa0c fc0b 	lsl.w	ip, ip, fp
 80002fe:	ea25 0c0c 	bic.w	ip, r5, ip
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000302:	690d      	ldr	r5, [r1, #16]
 8000304:	fa05 f50b 	lsl.w	r5, r5, fp
 8000308:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800030c:	f8ca 5020 	str.w	r5, [sl, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000310:	2503      	movs	r5, #3
 8000312:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8000316:	fa05 f50a 	lsl.w	r5, r5, sl
 800031a:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 800031c:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000320:	f004 0c03 	and.w	ip, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000324:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000328:	fa0c fc0a 	lsl.w	ip, ip, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800032c:	3f01      	subs	r7, #1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800032e:	ea4c 0c0b 	orr.w	ip, ip, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000332:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000334:	f8c0 c000 	str.w	ip, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000338:	d811      	bhi.n	800035e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR; 
 800033a:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800033c:	ea07 0b05 	and.w	fp, r7, r5
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000340:	68cf      	ldr	r7, [r1, #12]
 8000342:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000346:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800034a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800034c:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800034e:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000352:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000356:	409f      	lsls	r7, r3
 8000358:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800035c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800035e:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000360:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000362:	688f      	ldr	r7, [r1, #8]
 8000364:	fa07 f70a 	lsl.w	r7, r7, sl
 8000368:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800036a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800036c:	00e5      	lsls	r5, r4, #3
 800036e:	d55b      	bpl.n	8000428 <HAL_GPIO_Init+0x17c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000370:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000374:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000378:	f023 0703 	bic.w	r7, r3, #3
 800037c:	f045 0501 	orr.w	r5, r5, #1
 8000380:	f8c9 5020 	str.w	r5, [r9, #32]
 8000384:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000388:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800038c:	f005 0501 	and.w	r5, r5, #1
 8000390:	9501      	str	r5, [sp, #4]
 8000392:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000396:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800039a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800039c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 80003a0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003a4:	fa0c f50e 	lsl.w	r5, ip, lr
 80003a8:	ea2a 0c05 	bic.w	ip, sl, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003ac:	4d26      	ldr	r5, [pc, #152]	; (8000448 <HAL_GPIO_Init+0x19c>)
 80003ae:	42a8      	cmp	r0, r5
 80003b0:	d03c      	beq.n	800042c <HAL_GPIO_Init+0x180>
 80003b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b6:	42a8      	cmp	r0, r5
 80003b8:	d03a      	beq.n	8000430 <HAL_GPIO_Init+0x184>
 80003ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003be:	42a8      	cmp	r0, r5
 80003c0:	d038      	beq.n	8000434 <HAL_GPIO_Init+0x188>
 80003c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003c6:	42a8      	cmp	r0, r5
 80003c8:	d036      	beq.n	8000438 <HAL_GPIO_Init+0x18c>
 80003ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ce:	42a8      	cmp	r0, r5
 80003d0:	d034      	beq.n	800043c <HAL_GPIO_Init+0x190>
 80003d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003d6:	42a8      	cmp	r0, r5
 80003d8:	d032      	beq.n	8000440 <HAL_GPIO_Init+0x194>
 80003da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003de:	42a8      	cmp	r0, r5
 80003e0:	bf14      	ite	ne
 80003e2:	2507      	movne	r5, #7
 80003e4:	2506      	moveq	r5, #6
 80003e6:	fa05 f50e 	lsl.w	r5, r5, lr
 80003ea:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80003ee:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80003f0:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 80003f2:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003f4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80003f8:	bf0c      	ite	eq
 80003fa:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80003fc:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80003fe:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000400:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000402:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000406:	bf0c      	ite	eq
 8000408:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800040a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 800040c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800040e:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000410:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000414:	bf0c      	ite	eq
 8000416:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000418:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 800041a:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800041c:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800041e:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000420:	bf54      	ite	pl
 8000422:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 8000424:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000426:	60d5      	str	r5, [r2, #12]
    position++;
 8000428:	3301      	adds	r3, #1
 800042a:	e747      	b.n	80002bc <HAL_GPIO_Init+0x10>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800042c:	2500      	movs	r5, #0
 800042e:	e7da      	b.n	80003e6 <HAL_GPIO_Init+0x13a>
 8000430:	2501      	movs	r5, #1
 8000432:	e7d8      	b.n	80003e6 <HAL_GPIO_Init+0x13a>
 8000434:	2502      	movs	r5, #2
 8000436:	e7d6      	b.n	80003e6 <HAL_GPIO_Init+0x13a>
 8000438:	2503      	movs	r5, #3
 800043a:	e7d4      	b.n	80003e6 <HAL_GPIO_Init+0x13a>
 800043c:	2504      	movs	r5, #4
 800043e:	e7d2      	b.n	80003e6 <HAL_GPIO_Init+0x13a>
 8000440:	2505      	movs	r5, #5
 8000442:	e7d0      	b.n	80003e6 <HAL_GPIO_Init+0x13a>
 8000444:	40010400 	.word	0x40010400
 8000448:	40020000 	.word	0x40020000
 800044c:	40023800 	.word	0x40023800

08000450 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000450:	b10a      	cbz	r2, 8000456 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000452:	6181      	str	r1, [r0, #24]
 8000454:	4770      	bx	lr
 8000456:	0409      	lsls	r1, r1, #16
 8000458:	e7fb      	b.n	8000452 <HAL_GPIO_WritePin+0x2>
	...

0800045c <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800045c:	4b1c      	ldr	r3, [pc, #112]	; (80004d0 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 800045e:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000460:	689a      	ldr	r2, [r3, #8]
 8000462:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8000466:	d00c      	beq.n	8000482 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8000468:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800046a:	491a      	ldr	r1, [pc, #104]	; (80004d4 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 800046c:	680b      	ldr	r3, [r1, #0]
 800046e:	f023 0301 	bic.w	r3, r3, #1
 8000472:	4313      	orrs	r3, r2
 8000474:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000476:	6808      	ldr	r0, [r1, #0]
 8000478:	f000 0001 	and.w	r0, r0, #1
 800047c:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 800047e:	b002      	add	sp, #8
 8000480:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000484:	4914      	ldr	r1, [pc, #80]	; (80004d8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000486:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800048a:	d00f      	beq.n	80004ac <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800048c:	680a      	ldr	r2, [r1, #0]
 800048e:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8000492:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8000496:	d1e7      	bne.n	8000468 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000498:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 800049c:	d1e4      	bne.n	8000468 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 800049e:	4a0d      	ldr	r2, [pc, #52]	; (80004d4 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80004a0:	6813      	ldr	r3, [r2, #0]
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 80004a8:	2201      	movs	r2, #1
 80004aa:	e7de      	b.n	800046a <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80004ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004b2:	625a      	str	r2, [r3, #36]	; 0x24
 80004b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004b6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80004ba:	9201      	str	r2, [sp, #4]
 80004bc:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80004be:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80004c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80004c2:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80004c6:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80004ca:	6259      	str	r1, [r3, #36]	; 0x24
 80004cc:	e7e1      	b.n	8000492 <RCC_SetFlashLatencyFromMSIRange+0x36>
 80004ce:	bf00      	nop
 80004d0:	40023800 	.word	0x40023800
 80004d4:	40023c00 	.word	0x40023c00
 80004d8:	40007000 	.word	0x40007000

080004dc <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004dc:	6803      	ldr	r3, [r0, #0]
{
 80004de:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e2:	07d9      	lsls	r1, r3, #31
{
 80004e4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e6:	d46a      	bmi.n	80005be <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004e8:	6823      	ldr	r3, [r4, #0]
 80004ea:	079a      	lsls	r2, r3, #30
 80004ec:	f100 80e6 	bmi.w	80006bc <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80004f0:	6823      	ldr	r3, [r4, #0]
 80004f2:	06de      	lsls	r6, r3, #27
 80004f4:	d555      	bpl.n	80005a2 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80004f6:	4dc1      	ldr	r5, [pc, #772]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 80004f8:	68ab      	ldr	r3, [r5, #8]
 80004fa:	f013 0f0c 	tst.w	r3, #12
 80004fe:	f040 8183 	bne.w	8000808 <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000506:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800050a:	6829      	ldr	r1, [r5, #0]
 800050c:	fa93 f3a3 	rbit	r3, r3
 8000510:	fab3 f383 	clz	r3, r3
 8000514:	2201      	movs	r2, #1
 8000516:	f003 031f 	and.w	r3, r3, #31
 800051a:	fa02 f303 	lsl.w	r3, r2, r3
 800051e:	420b      	tst	r3, r1
 8000520:	d002      	beq.n	8000528 <HAL_RCC_OscConfig+0x4c>
 8000522:	69a3      	ldr	r3, [r4, #24]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d06e      	beq.n	8000606 <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000528:	4db4      	ldr	r5, [pc, #720]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 800052a:	6a20      	ldr	r0, [r4, #32]
 800052c:	686b      	ldr	r3, [r5, #4]
 800052e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000532:	4298      	cmp	r0, r3
 8000534:	f240 814a 	bls.w	80007cc <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000538:	f7ff ff90 	bl	800045c <RCC_SetFlashLatencyFromMSIRange>
 800053c:	2800      	cmp	r0, #0
 800053e:	d162      	bne.n	8000606 <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000540:	686b      	ldr	r3, [r5, #4]
 8000542:	6a22      	ldr	r2, [r4, #32]
 8000544:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000548:	4313      	orrs	r3, r2
 800054a:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800054c:	6869      	ldr	r1, [r5, #4]
 800054e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000552:	fa93 f3a3 	rbit	r3, r3
 8000556:	fab3 f283 	clz	r2, r3
 800055a:	69e3      	ldr	r3, [r4, #28]
 800055c:	4093      	lsls	r3, r2
 800055e:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000562:	4313      	orrs	r3, r2
 8000564:	606b      	str	r3, [r5, #4]
 8000566:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800056a:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800056e:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000572:	4ba2      	ldr	r3, [pc, #648]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 8000574:	21f0      	movs	r1, #240	; 0xf0
 8000576:	689a      	ldr	r2, [r3, #8]
 8000578:	fa91 f1a1 	rbit	r1, r1
 800057c:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000580:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000582:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000586:	40c3      	lsrs	r3, r0
 8000588:	1c58      	adds	r0, r3, #1
 800058a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800058e:	40ca      	lsrs	r2, r1
 8000590:	499b      	ldr	r1, [pc, #620]	; (8000800 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000592:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000594:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000596:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000598:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800059a:	4a9a      	ldr	r2, [pc, #616]	; (8000804 <HAL_RCC_OscConfig+0x328>)
 800059c:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800059e:	f001 fe7b 	bl	8002298 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005a2:	6823      	ldr	r3, [r4, #0]
 80005a4:	071d      	lsls	r5, r3, #28
 80005a6:	f100 8191 	bmi.w	80008cc <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	0758      	lsls	r0, r3, #29
 80005ae:	f100 81d3 	bmi.w	8000958 <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80005b4:	2a00      	cmp	r2, #0
 80005b6:	f040 8257 	bne.w	8000a68 <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 80005ba:	2000      	movs	r0, #0
 80005bc:	e024      	b.n	8000608 <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005be:	4b8f      	ldr	r3, [pc, #572]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 80005c0:	689a      	ldr	r2, [r3, #8]
 80005c2:	f002 020c 	and.w	r2, r2, #12
 80005c6:	2a08      	cmp	r2, #8
 80005c8:	d007      	beq.n	80005da <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005ca:	689a      	ldr	r2, [r3, #8]
 80005cc:	f002 020c 	and.w	r2, r2, #12
 80005d0:	2a0c      	cmp	r2, #12
 80005d2:	d11c      	bne.n	800060e <HAL_RCC_OscConfig+0x132>
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	03db      	lsls	r3, r3, #15
 80005d8:	d519      	bpl.n	800060e <HAL_RCC_OscConfig+0x132>
 80005da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005de:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005e2:	4a86      	ldr	r2, [pc, #536]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 80005e4:	6811      	ldr	r1, [r2, #0]
 80005e6:	fa93 f3a3 	rbit	r3, r3
 80005ea:	fab3 f383 	clz	r3, r3
 80005ee:	2201      	movs	r2, #1
 80005f0:	f003 031f 	and.w	r3, r3, #31
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	420b      	tst	r3, r1
 80005fa:	f43f af75 	beq.w	80004e8 <HAL_RCC_OscConfig+0xc>
 80005fe:	6863      	ldr	r3, [r4, #4]
 8000600:	2b00      	cmp	r3, #0
 8000602:	f47f af71 	bne.w	80004e8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000606:	2001      	movs	r0, #1
}
 8000608:	b003      	add	sp, #12
 800060a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800060e:	6863      	ldr	r3, [r4, #4]
 8000610:	4d7a      	ldr	r5, [pc, #488]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 8000612:	2b01      	cmp	r3, #1
 8000614:	d120      	bne.n	8000658 <HAL_RCC_OscConfig+0x17c>
 8000616:	682b      	ldr	r3, [r5, #0]
 8000618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800061c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800061e:	f7ff fdcb 	bl	80001b8 <HAL_GetTick>
 8000622:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000626:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000628:	2601      	movs	r6, #1
 800062a:	4f74      	ldr	r7, [pc, #464]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 800062c:	fa95 f3a5 	rbit	r3, r5
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	fa95 f3a5 	rbit	r3, r5
 8000636:	fab3 f383 	clz	r3, r3
 800063a:	f003 031f 	and.w	r3, r3, #31
 800063e:	fa06 f303 	lsl.w	r3, r6, r3
 8000642:	4213      	tst	r3, r2
 8000644:	f47f af50 	bne.w	80004e8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000648:	f7ff fdb6 	bl	80001b8 <HAL_GetTick>
 800064c:	eba0 0008 	sub.w	r0, r0, r8
 8000650:	2864      	cmp	r0, #100	; 0x64
 8000652:	d9eb      	bls.n	800062c <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8000654:	2003      	movs	r0, #3
 8000656:	e7d7      	b.n	8000608 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000658:	bb13      	cbnz	r3, 80006a0 <HAL_RCC_OscConfig+0x1c4>
 800065a:	682b      	ldr	r3, [r5, #0]
 800065c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000664:	602b      	str	r3, [r5, #0]
 8000666:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000668:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800066a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800066e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000670:	f7ff fda2 	bl	80001b8 <HAL_GetTick>
 8000674:	4680      	mov	r8, r0
 8000676:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800067a:	682a      	ldr	r2, [r5, #0]
 800067c:	fa96 f3a6 	rbit	r3, r6
 8000680:	fab3 f383 	clz	r3, r3
 8000684:	f003 031f 	and.w	r3, r3, #31
 8000688:	fa07 f303 	lsl.w	r3, r7, r3
 800068c:	4213      	tst	r3, r2
 800068e:	f43f af2b 	beq.w	80004e8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000692:	f7ff fd91 	bl	80001b8 <HAL_GetTick>
 8000696:	eba0 0008 	sub.w	r0, r0, r8
 800069a:	2864      	cmp	r0, #100	; 0x64
 800069c:	d9eb      	bls.n	8000676 <HAL_RCC_OscConfig+0x19a>
 800069e:	e7d9      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006a0:	2b05      	cmp	r3, #5
 80006a2:	682b      	ldr	r3, [r5, #0]
 80006a4:	d103      	bne.n	80006ae <HAL_RCC_OscConfig+0x1d2>
 80006a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006aa:	602b      	str	r3, [r5, #0]
 80006ac:	e7b3      	b.n	8000616 <HAL_RCC_OscConfig+0x13a>
 80006ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006b2:	602b      	str	r3, [r5, #0]
 80006b4:	682b      	ldr	r3, [r5, #0]
 80006b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ba:	e7af      	b.n	800061c <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006bc:	4b4f      	ldr	r3, [pc, #316]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	f002 020c 	and.w	r2, r2, #12
 80006c4:	2a04      	cmp	r2, #4
 80006c6:	d007      	beq.n	80006d8 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006c8:	689a      	ldr	r2, [r3, #8]
 80006ca:	f002 020c 	and.w	r2, r2, #12
 80006ce:	2a0c      	cmp	r2, #12
 80006d0:	d124      	bne.n	800071c <HAL_RCC_OscConfig+0x240>
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	03df      	lsls	r7, r3, #15
 80006d6:	d421      	bmi.n	800071c <HAL_RCC_OscConfig+0x240>
 80006d8:	2302      	movs	r3, #2
 80006da:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006de:	4a47      	ldr	r2, [pc, #284]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 80006e0:	6810      	ldr	r0, [r2, #0]
 80006e2:	fa93 f3a3 	rbit	r3, r3
 80006e6:	fab3 f383 	clz	r3, r3
 80006ea:	2101      	movs	r1, #1
 80006ec:	f003 031f 	and.w	r3, r3, #31
 80006f0:	fa01 f303 	lsl.w	r3, r1, r3
 80006f4:	4203      	tst	r3, r0
 80006f6:	4613      	mov	r3, r2
 80006f8:	d002      	beq.n	8000700 <HAL_RCC_OscConfig+0x224>
 80006fa:	68e2      	ldr	r2, [r4, #12]
 80006fc:	428a      	cmp	r2, r1
 80006fe:	d182      	bne.n	8000606 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000700:	6858      	ldr	r0, [r3, #4]
 8000702:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8000706:	fa92 f2a2 	rbit	r2, r2
 800070a:	fab2 f182 	clz	r1, r2
 800070e:	6922      	ldr	r2, [r4, #16]
 8000710:	408a      	lsls	r2, r1
 8000712:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 8000716:	430a      	orrs	r2, r1
 8000718:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800071a:	e6e9      	b.n	80004f0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800071c:	68e2      	ldr	r2, [r4, #12]
 800071e:	2501      	movs	r5, #1
 8000720:	b382      	cbz	r2, 8000784 <HAL_RCC_OscConfig+0x2a8>
 8000722:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8000726:	fab3 f383 	clz	r3, r3
 800072a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800072e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000736:	f7ff fd3f 	bl	80001b8 <HAL_GetTick>
 800073a:	2702      	movs	r7, #2
 800073c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800073e:	4e2f      	ldr	r6, [pc, #188]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 8000740:	fa97 f3a7 	rbit	r3, r7
 8000744:	6832      	ldr	r2, [r6, #0]
 8000746:	fa97 f3a7 	rbit	r3, r7
 800074a:	fab3 f383 	clz	r3, r3
 800074e:	f003 031f 	and.w	r3, r3, #31
 8000752:	fa05 f303 	lsl.w	r3, r5, r3
 8000756:	4213      	tst	r3, r2
 8000758:	d00d      	beq.n	8000776 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800075a:	6871      	ldr	r1, [r6, #4]
 800075c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000760:	fa93 f3a3 	rbit	r3, r3
 8000764:	fab3 f283 	clz	r2, r3
 8000768:	6923      	ldr	r3, [r4, #16]
 800076a:	4093      	lsls	r3, r2
 800076c:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 8000770:	4313      	orrs	r3, r2
 8000772:	6073      	str	r3, [r6, #4]
 8000774:	e6bc      	b.n	80004f0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000776:	f7ff fd1f 	bl	80001b8 <HAL_GetTick>
 800077a:	eba0 0008 	sub.w	r0, r0, r8
 800077e:	2802      	cmp	r0, #2
 8000780:	d9de      	bls.n	8000740 <HAL_RCC_OscConfig+0x264>
 8000782:	e767      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
 8000784:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000788:	fab3 f383 	clz	r3, r3
 800078c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000790:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000798:	f7ff fd0e 	bl	80001b8 <HAL_GetTick>
 800079c:	2602      	movs	r6, #2
 800079e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007a0:	4f16      	ldr	r7, [pc, #88]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 80007a2:	fa96 f3a6 	rbit	r3, r6
 80007a6:	683a      	ldr	r2, [r7, #0]
 80007a8:	fa96 f3a6 	rbit	r3, r6
 80007ac:	fab3 f383 	clz	r3, r3
 80007b0:	f003 031f 	and.w	r3, r3, #31
 80007b4:	fa05 f303 	lsl.w	r3, r5, r3
 80007b8:	4213      	tst	r3, r2
 80007ba:	f43f ae99 	beq.w	80004f0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007be:	f7ff fcfb 	bl	80001b8 <HAL_GetTick>
 80007c2:	eba0 0008 	sub.w	r0, r0, r8
 80007c6:	2802      	cmp	r0, #2
 80007c8:	d9eb      	bls.n	80007a2 <HAL_RCC_OscConfig+0x2c6>
 80007ca:	e743      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80007cc:	686b      	ldr	r3, [r5, #4]
 80007ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80007d2:	4303      	orrs	r3, r0
 80007d4:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80007d6:	6869      	ldr	r1, [r5, #4]
 80007d8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80007dc:	fa93 f3a3 	rbit	r3, r3
 80007e0:	fab3 f283 	clz	r2, r3
 80007e4:	69e3      	ldr	r3, [r4, #28]
 80007e6:	4093      	lsls	r3, r2
 80007e8:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 80007ec:	4313      	orrs	r3, r2
 80007ee:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80007f0:	f7ff fe34 	bl	800045c <RCC_SetFlashLatencyFromMSIRange>
 80007f4:	2800      	cmp	r0, #0
 80007f6:	f43f aeb6 	beq.w	8000566 <HAL_RCC_OscConfig+0x8a>
 80007fa:	e704      	b.n	8000606 <HAL_RCC_OscConfig+0x12a>
 80007fc:	40023800 	.word	0x40023800
 8000800:	08002d0a 	.word	0x08002d0a
 8000804:	20000008 	.word	0x20000008
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000808:	69a2      	ldr	r2, [r4, #24]
 800080a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080e:	2a00      	cmp	r2, #0
 8000810:	d037      	beq.n	8000882 <HAL_RCC_OscConfig+0x3a6>
 8000812:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 8000816:	fab3 f383 	clz	r3, r3
 800081a:	2601      	movs	r6, #1
 800081c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000820:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000828:	f7ff fcc6 	bl	80001b8 <HAL_GetTick>
 800082c:	f44f 7700 	mov.w	r7, #512	; 0x200
 8000830:	4680      	mov	r8, r0
 8000832:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000836:	682a      	ldr	r2, [r5, #0]
 8000838:	fa97 f3a7 	rbit	r3, r7
 800083c:	fab3 f383 	clz	r3, r3
 8000840:	f003 031f 	and.w	r3, r3, #31
 8000844:	fa06 f303 	lsl.w	r3, r6, r3
 8000848:	4213      	tst	r3, r2
 800084a:	d013      	beq.n	8000874 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800084c:	686b      	ldr	r3, [r5, #4]
 800084e:	6a22      	ldr	r2, [r4, #32]
 8000850:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000854:	4313      	orrs	r3, r2
 8000856:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000858:	6869      	ldr	r1, [r5, #4]
 800085a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800085e:	fa93 f3a3 	rbit	r3, r3
 8000862:	fab3 f283 	clz	r2, r3
 8000866:	69e3      	ldr	r3, [r4, #28]
 8000868:	4093      	lsls	r3, r2
 800086a:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800086e:	4313      	orrs	r3, r2
 8000870:	606b      	str	r3, [r5, #4]
 8000872:	e696      	b.n	80005a2 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000874:	f7ff fca0 	bl	80001b8 <HAL_GetTick>
 8000878:	eba0 0008 	sub.w	r0, r0, r8
 800087c:	2802      	cmp	r0, #2
 800087e:	d9d8      	bls.n	8000832 <HAL_RCC_OscConfig+0x356>
 8000880:	e6e8      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
 8000882:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 8000886:	fab3 f383 	clz	r3, r3
 800088a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800088e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000896:	f7ff fc8f 	bl	80001b8 <HAL_GetTick>
 800089a:	f44f 7600 	mov.w	r6, #512	; 0x200
 800089e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80008a0:	2701      	movs	r7, #1
 80008a2:	fa96 f3a6 	rbit	r3, r6
 80008a6:	682a      	ldr	r2, [r5, #0]
 80008a8:	fa96 f3a6 	rbit	r3, r6
 80008ac:	fab3 f383 	clz	r3, r3
 80008b0:	f003 031f 	and.w	r3, r3, #31
 80008b4:	fa07 f303 	lsl.w	r3, r7, r3
 80008b8:	4213      	tst	r3, r2
 80008ba:	f43f ae72 	beq.w	80005a2 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80008be:	f7ff fc7b 	bl	80001b8 <HAL_GetTick>
 80008c2:	eba0 0008 	sub.w	r0, r0, r8
 80008c6:	2802      	cmp	r0, #2
 80008c8:	d9eb      	bls.n	80008a2 <HAL_RCC_OscConfig+0x3c6>
 80008ca:	e6c3      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008cc:	6962      	ldr	r2, [r4, #20]
 80008ce:	2501      	movs	r5, #1
 80008d0:	49a9      	ldr	r1, [pc, #676]	; (8000b78 <HAL_RCC_OscConfig+0x69c>)
 80008d2:	b302      	cbz	r2, 8000916 <HAL_RCC_OscConfig+0x43a>
 80008d4:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 80008d8:	fab3 f383 	clz	r3, r3
 80008dc:	440b      	add	r3, r1
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 80008e2:	f7ff fc69 	bl	80001b8 <HAL_GetTick>
 80008e6:	2602      	movs	r6, #2
 80008e8:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008ea:	4fa4      	ldr	r7, [pc, #656]	; (8000b7c <HAL_RCC_OscConfig+0x6a0>)
 80008ec:	fa96 f3a6 	rbit	r3, r6
 80008f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008f2:	fa96 f3a6 	rbit	r3, r6
 80008f6:	fab3 f383 	clz	r3, r3
 80008fa:	f003 031f 	and.w	r3, r3, #31
 80008fe:	fa05 f303 	lsl.w	r3, r5, r3
 8000902:	4213      	tst	r3, r2
 8000904:	f47f ae51 	bne.w	80005aa <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000908:	f7ff fc56 	bl	80001b8 <HAL_GetTick>
 800090c:	eba0 0008 	sub.w	r0, r0, r8
 8000910:	2802      	cmp	r0, #2
 8000912:	d9eb      	bls.n	80008ec <HAL_RCC_OscConfig+0x410>
 8000914:	e69e      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
 8000916:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 800091a:	fab3 f383 	clz	r3, r3
 800091e:	440b      	add	r3, r1
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000924:	f7ff fc48 	bl	80001b8 <HAL_GetTick>
 8000928:	2602      	movs	r6, #2
 800092a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800092c:	4f93      	ldr	r7, [pc, #588]	; (8000b7c <HAL_RCC_OscConfig+0x6a0>)
 800092e:	fa96 f3a6 	rbit	r3, r6
 8000932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000934:	fa96 f3a6 	rbit	r3, r6
 8000938:	fab3 f383 	clz	r3, r3
 800093c:	f003 031f 	and.w	r3, r3, #31
 8000940:	fa05 f303 	lsl.w	r3, r5, r3
 8000944:	4213      	tst	r3, r2
 8000946:	f43f ae30 	beq.w	80005aa <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800094a:	f7ff fc35 	bl	80001b8 <HAL_GetTick>
 800094e:	eba0 0008 	sub.w	r0, r0, r8
 8000952:	2802      	cmp	r0, #2
 8000954:	d9eb      	bls.n	800092e <HAL_RCC_OscConfig+0x452>
 8000956:	e67d      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000958:	4b88      	ldr	r3, [pc, #544]	; (8000b7c <HAL_RCC_OscConfig+0x6a0>)
 800095a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800095c:	00d1      	lsls	r1, r2, #3
 800095e:	d434      	bmi.n	80009ca <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8000960:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000964:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
 800096a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000974:	4d82      	ldr	r5, [pc, #520]	; (8000b80 <HAL_RCC_OscConfig+0x6a4>)
 8000976:	682b      	ldr	r3, [r5, #0]
 8000978:	05da      	lsls	r2, r3, #23
 800097a:	d528      	bpl.n	80009ce <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800097c:	68a3      	ldr	r3, [r4, #8]
 800097e:	4d7f      	ldr	r5, [pc, #508]	; (8000b7c <HAL_RCC_OscConfig+0x6a0>)
 8000980:	2b01      	cmp	r3, #1
 8000982:	d134      	bne.n	80009ee <HAL_RCC_OscConfig+0x512>
 8000984:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800098c:	f7ff fc14 	bl	80001b8 <HAL_GetTick>
 8000990:	f44f 7500 	mov.w	r5, #512	; 0x200
 8000994:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000996:	2701      	movs	r7, #1
 8000998:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8000b7c <HAL_RCC_OscConfig+0x6a0>
 800099c:	fa95 f3a5 	rbit	r3, r5
 80009a0:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80009a4:	fa95 f3a5 	rbit	r3, r5
 80009a8:	fab3 f383 	clz	r3, r3
 80009ac:	f003 031f 	and.w	r3, r3, #31
 80009b0:	fa07 f303 	lsl.w	r3, r7, r3
 80009b4:	4213      	tst	r3, r2
 80009b6:	d04e      	beq.n	8000a56 <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 80009b8:	2e00      	cmp	r6, #0
 80009ba:	f43f adfa 	beq.w	80005b2 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009be:	4a6f      	ldr	r2, [pc, #444]	; (8000b7c <HAL_RCC_OscConfig+0x6a0>)
 80009c0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80009c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009c6:	6253      	str	r3, [r2, #36]	; 0x24
 80009c8:	e5f3      	b.n	80005b2 <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 80009ca:	2600      	movs	r6, #0
 80009cc:	e7d2      	b.n	8000974 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009ce:	682b      	ldr	r3, [r5, #0]
 80009d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80009d6:	f7ff fbef 	bl	80001b8 <HAL_GetTick>
 80009da:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009dc:	682b      	ldr	r3, [r5, #0]
 80009de:	05db      	lsls	r3, r3, #23
 80009e0:	d4cc      	bmi.n	800097c <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009e2:	f7ff fbe9 	bl	80001b8 <HAL_GetTick>
 80009e6:	1bc0      	subs	r0, r0, r7
 80009e8:	2864      	cmp	r0, #100	; 0x64
 80009ea:	d9f7      	bls.n	80009dc <HAL_RCC_OscConfig+0x500>
 80009ec:	e632      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ee:	bb23      	cbnz	r3, 8000a3a <HAL_RCC_OscConfig+0x55e>
 80009f0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80009f2:	f44f 7700 	mov.w	r7, #512	; 0x200
 80009f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009fa:	636b      	str	r3, [r5, #52]	; 0x34
 80009fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009fe:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a06:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000a08:	f7ff fbd6 	bl	80001b8 <HAL_GetTick>
 8000a0c:	4681      	mov	r9, r0
 8000a0e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a12:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000a14:	fa97 f3a7 	rbit	r3, r7
 8000a18:	fab3 f383 	clz	r3, r3
 8000a1c:	f003 031f 	and.w	r3, r3, #31
 8000a20:	fa08 f303 	lsl.w	r3, r8, r3
 8000a24:	4213      	tst	r3, r2
 8000a26:	d0c7      	beq.n	80009b8 <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a28:	f7ff fbc6 	bl	80001b8 <HAL_GetTick>
 8000a2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a30:	eba0 0009 	sub.w	r0, r0, r9
 8000a34:	4298      	cmp	r0, r3
 8000a36:	d9ea      	bls.n	8000a0e <HAL_RCC_OscConfig+0x532>
 8000a38:	e60c      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a3a:	2b05      	cmp	r3, #5
 8000a3c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a3e:	d103      	bne.n	8000a48 <HAL_RCC_OscConfig+0x56c>
 8000a40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a44:	636b      	str	r3, [r5, #52]	; 0x34
 8000a46:	e79d      	b.n	8000984 <HAL_RCC_OscConfig+0x4a8>
 8000a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a4c:	636b      	str	r3, [r5, #52]	; 0x34
 8000a4e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a54:	e799      	b.n	800098a <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a56:	f7ff fbaf 	bl	80001b8 <HAL_GetTick>
 8000a5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a5e:	eba0 0009 	sub.w	r0, r0, r9
 8000a62:	4298      	cmp	r0, r3
 8000a64:	d99a      	bls.n	800099c <HAL_RCC_OscConfig+0x4c0>
 8000a66:	e5f5      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a68:	4d44      	ldr	r5, [pc, #272]	; (8000b7c <HAL_RCC_OscConfig+0x6a0>)
 8000a6a:	68ab      	ldr	r3, [r5, #8]
 8000a6c:	f003 030c 	and.w	r3, r3, #12
 8000a70:	2b0c      	cmp	r3, #12
 8000a72:	f43f adc8 	beq.w	8000606 <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a76:	2a02      	cmp	r2, #2
 8000a78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a7c:	d156      	bne.n	8000b2c <HAL_RCC_OscConfig+0x650>
 8000a7e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a82:	fab3 f383 	clz	r3, r3
 8000a86:	2200      	movs	r2, #0
 8000a88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a8c:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a94:	f7ff fb90 	bl	80001b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a98:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 8000a9a:	4680      	mov	r8, r0
 8000a9c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000aa0:	2501      	movs	r5, #1
 8000aa2:	fa97 f3a7 	rbit	r3, r7
 8000aa6:	6832      	ldr	r2, [r6, #0]
 8000aa8:	fa97 f3a7 	rbit	r3, r7
 8000aac:	fab3 f383 	clz	r3, r3
 8000ab0:	f003 031f 	and.w	r3, r3, #31
 8000ab4:	fa05 f303 	lsl.w	r3, r5, r3
 8000ab8:	4213      	tst	r3, r2
 8000aba:	d130      	bne.n	8000b1e <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000abc:	68b2      	ldr	r2, [r6, #8]
 8000abe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ac0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000ac2:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8000ac6:	430b      	orrs	r3, r1
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000acc:	4313      	orrs	r3, r2
 8000ace:	60b3      	str	r3, [r6, #8]
 8000ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ad4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000ad8:	fab3 f383 	clz	r3, r3
 8000adc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ae0:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000ae8:	f7ff fb66 	bl	80001b8 <HAL_GetTick>
 8000aec:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000af0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000af2:	2501      	movs	r5, #1
 8000af4:	4e21      	ldr	r6, [pc, #132]	; (8000b7c <HAL_RCC_OscConfig+0x6a0>)
 8000af6:	fa94 f3a4 	rbit	r3, r4
 8000afa:	6832      	ldr	r2, [r6, #0]
 8000afc:	fa94 f3a4 	rbit	r3, r4
 8000b00:	fab3 f383 	clz	r3, r3
 8000b04:	f003 031f 	and.w	r3, r3, #31
 8000b08:	fa05 f303 	lsl.w	r3, r5, r3
 8000b0c:	4213      	tst	r3, r2
 8000b0e:	f47f ad54 	bne.w	80005ba <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b12:	f7ff fb51 	bl	80001b8 <HAL_GetTick>
 8000b16:	1bc0      	subs	r0, r0, r7
 8000b18:	2802      	cmp	r0, #2
 8000b1a:	d9ec      	bls.n	8000af6 <HAL_RCC_OscConfig+0x61a>
 8000b1c:	e59a      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b1e:	f7ff fb4b 	bl	80001b8 <HAL_GetTick>
 8000b22:	eba0 0008 	sub.w	r0, r0, r8
 8000b26:	2802      	cmp	r0, #2
 8000b28:	d9bb      	bls.n	8000aa2 <HAL_RCC_OscConfig+0x5c6>
 8000b2a:	e593      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
 8000b2c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000b30:	fab3 f383 	clz	r3, r3
 8000b34:	2200      	movs	r2, #0
 8000b36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b3a:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b42:	f7ff fb39 	bl	80001b8 <HAL_GetTick>
 8000b46:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000b4a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b4c:	2601      	movs	r6, #1
 8000b4e:	fa94 f3a4 	rbit	r3, r4
 8000b52:	682a      	ldr	r2, [r5, #0]
 8000b54:	fa94 f3a4 	rbit	r3, r4
 8000b58:	fab3 f383 	clz	r3, r3
 8000b5c:	f003 031f 	and.w	r3, r3, #31
 8000b60:	fa06 f303 	lsl.w	r3, r6, r3
 8000b64:	4213      	tst	r3, r2
 8000b66:	f43f ad28 	beq.w	80005ba <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b6a:	f7ff fb25 	bl	80001b8 <HAL_GetTick>
 8000b6e:	1bc0      	subs	r0, r0, r7
 8000b70:	2802      	cmp	r0, #2
 8000b72:	d9ec      	bls.n	8000b4e <HAL_RCC_OscConfig+0x672>
 8000b74:	e56e      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
 8000b76:	bf00      	nop
 8000b78:	1091c1a0 	.word	0x1091c1a0
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40007000 	.word	0x40007000

08000b84 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000b84:	491e      	ldr	r1, [pc, #120]	; (8000c00 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8000b86:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000b88:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8000b8a:	f003 020c 	and.w	r2, r3, #12
 8000b8e:	2a08      	cmp	r2, #8
 8000b90:	d005      	beq.n	8000b9e <HAL_RCC_GetSysClockFreq+0x1a>
 8000b92:	2a0c      	cmp	r2, #12
 8000b94:	d005      	beq.n	8000ba2 <HAL_RCC_GetSysClockFreq+0x1e>
 8000b96:	2a04      	cmp	r2, #4
 8000b98:	d122      	bne.n	8000be0 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8000b9a:	481a      	ldr	r0, [pc, #104]	; (8000c04 <HAL_RCC_GetSysClockFreq+0x80>)
}
 8000b9c:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000b9e:	481a      	ldr	r0, [pc, #104]	; (8000c08 <HAL_RCC_GetSysClockFreq+0x84>)
 8000ba0:	bd10      	pop	{r4, pc}
 8000ba2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000ba6:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000baa:	fab2 f282 	clz	r2, r2
 8000bae:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8000bb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb6:	4815      	ldr	r0, [pc, #84]	; (8000c0c <HAL_RCC_GetSysClockFreq+0x88>)
 8000bb8:	5c84      	ldrb	r4, [r0, r2]
 8000bba:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8000bbe:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000bc2:	fab0 f280 	clz	r2, r0
 8000bc6:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bca:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000bcc:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bce:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8000bd0:	bf4c      	ite	mi
 8000bd2:	4b0d      	ldrmi	r3, [pc, #52]	; (8000c08 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8000bd4:	4b0b      	ldrpl	r3, [pc, #44]	; (8000c04 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000bd6:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8000bd8:	4363      	muls	r3, r4
 8000bda:	fbb3 f0f0 	udiv	r0, r3, r0
 8000bde:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000be0:	6848      	ldr	r0, [r1, #4]
 8000be2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000be6:	fa93 f3a3 	rbit	r3, r3
 8000bea:	fab3 f383 	clz	r3, r3
 8000bee:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8000bf2:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8000bf4:	1c43      	adds	r3, r0, #1
 8000bf6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000bfa:	4098      	lsls	r0, r3
 8000bfc:	bd10      	pop	{r4, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800
 8000c04:	00f42400 	.word	0x00f42400
 8000c08:	007a1200 	.word	0x007a1200
 8000c0c:	08002d22 	.word	0x08002d22

08000c10 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c10:	4b6a      	ldr	r3, [pc, #424]	; (8000dbc <HAL_RCC_ClockConfig+0x1ac>)
{
 8000c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c16:	681a      	ldr	r2, [r3, #0]
{
 8000c18:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c1a:	f002 0201 	and.w	r2, r2, #1
 8000c1e:	428a      	cmp	r2, r1
{
 8000c20:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c22:	d330      	bcc.n	8000c86 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c24:	6832      	ldr	r2, [r6, #0]
 8000c26:	0794      	lsls	r4, r2, #30
 8000c28:	d440      	bmi.n	8000cac <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c2a:	07d0      	lsls	r0, r2, #31
 8000c2c:	d446      	bmi.n	8000cbc <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c2e:	4b63      	ldr	r3, [pc, #396]	; (8000dbc <HAL_RCC_ClockConfig+0x1ac>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	f002 0201 	and.w	r2, r2, #1
 8000c36:	4295      	cmp	r5, r2
 8000c38:	f0c0 80ae 	bcc.w	8000d98 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c3c:	6832      	ldr	r2, [r6, #0]
 8000c3e:	0751      	lsls	r1, r2, #29
 8000c40:	f100 80b3 	bmi.w	8000daa <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c44:	0713      	lsls	r3, r2, #28
 8000c46:	d507      	bpl.n	8000c58 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c48:	4a5d      	ldr	r2, [pc, #372]	; (8000dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8000c4a:	6931      	ldr	r1, [r6, #16]
 8000c4c:	6893      	ldr	r3, [r2, #8]
 8000c4e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c52:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c56:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000c58:	f7ff ff94 	bl	8000b84 <HAL_RCC_GetSysClockFreq>
 8000c5c:	4b58      	ldr	r3, [pc, #352]	; (8000dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8000c5e:	22f0      	movs	r2, #240	; 0xf0
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	fa92 f2a2 	rbit	r2, r2
 8000c66:	fab2 f282 	clz	r2, r2
 8000c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c6e:	40d3      	lsrs	r3, r2
 8000c70:	4a54      	ldr	r2, [pc, #336]	; (8000dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8000c72:	5cd3      	ldrb	r3, [r2, r3]
 8000c74:	40d8      	lsrs	r0, r3
 8000c76:	4b54      	ldr	r3, [pc, #336]	; (8000dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8000c78:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f001 fb0c 	bl	8002298 <HAL_InitTick>
  return HAL_OK;
 8000c80:	2000      	movs	r0, #0
}
 8000c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c86:	2901      	cmp	r1, #1
 8000c88:	bf02      	ittt	eq
 8000c8a:	681a      	ldreq	r2, [r3, #0]
 8000c8c:	f042 0204 	orreq.w	r2, r2, #4
 8000c90:	601a      	streq	r2, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	f022 0201 	bic.w	r2, r2, #1
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d0be      	beq.n	8000c24 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cac:	4944      	ldr	r1, [pc, #272]	; (8000dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8000cae:	68b0      	ldr	r0, [r6, #8]
 8000cb0:	688b      	ldr	r3, [r1, #8]
 8000cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000cb6:	4303      	orrs	r3, r0
 8000cb8:	608b      	str	r3, [r1, #8]
 8000cba:	e7b6      	b.n	8000c2a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cbc:	6872      	ldr	r2, [r6, #4]
 8000cbe:	4940      	ldr	r1, [pc, #256]	; (8000dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8000cc0:	2a02      	cmp	r2, #2
 8000cc2:	d10f      	bne.n	8000ce4 <HAL_RCC_ClockConfig+0xd4>
 8000cc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cc8:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000ccc:	6808      	ldr	r0, [r1, #0]
 8000cce:	fa93 f3a3 	rbit	r3, r3
 8000cd2:	fab3 f383 	clz	r3, r3
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	f003 031f 	and.w	r3, r3, #31
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	4203      	tst	r3, r0
 8000ce2:	e013      	b.n	8000d0c <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ce4:	2a03      	cmp	r2, #3
 8000ce6:	d102      	bne.n	8000cee <HAL_RCC_ClockConfig+0xde>
 8000ce8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cec:	e7ec      	b.n	8000cc8 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000cee:	2a01      	cmp	r2, #1
 8000cf0:	d129      	bne.n	8000d46 <HAL_RCC_ClockConfig+0x136>
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf8:	6809      	ldr	r1, [r1, #0]
 8000cfa:	fa93 f3a3 	rbit	r3, r3
 8000cfe:	fab3 f383 	clz	r3, r3
 8000d02:	f003 031f 	and.w	r3, r3, #31
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000d0c:	d0cb      	beq.n	8000ca6 <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d0e:	4c2c      	ldr	r4, [pc, #176]	; (8000dc0 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d10:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d14:	68a3      	ldr	r3, [r4, #8]
 8000d16:	f023 0303 	bic.w	r3, r3, #3
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8000d1e:	f7ff fa4b 	bl	80001b8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d22:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000d24:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d110      	bne.n	8000d4c <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d2a:	68a3      	ldr	r3, [r4, #8]
 8000d2c:	f003 030c 	and.w	r3, r3, #12
 8000d30:	2b08      	cmp	r3, #8
 8000d32:	f43f af7c 	beq.w	8000c2e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d36:	f7ff fa3f 	bl	80001b8 <HAL_GetTick>
 8000d3a:	1bc0      	subs	r0, r0, r7
 8000d3c:	4540      	cmp	r0, r8
 8000d3e:	d9f4      	bls.n	8000d2a <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8000d40:	2003      	movs	r0, #3
 8000d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d4a:	e7bd      	b.n	8000cc8 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	d10b      	bne.n	8000d68 <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d50:	68a3      	ldr	r3, [r4, #8]
 8000d52:	f003 030c 	and.w	r3, r3, #12
 8000d56:	2b0c      	cmp	r3, #12
 8000d58:	f43f af69 	beq.w	8000c2e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d5c:	f7ff fa2c 	bl	80001b8 <HAL_GetTick>
 8000d60:	1bc0      	subs	r0, r0, r7
 8000d62:	4540      	cmp	r0, r8
 8000d64:	d9f4      	bls.n	8000d50 <HAL_RCC_ClockConfig+0x140>
 8000d66:	e7eb      	b.n	8000d40 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d110      	bne.n	8000d8e <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d6c:	68a3      	ldr	r3, [r4, #8]
 8000d6e:	f003 030c 	and.w	r3, r3, #12
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	f43f af5b 	beq.w	8000c2e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d78:	f7ff fa1e 	bl	80001b8 <HAL_GetTick>
 8000d7c:	1bc0      	subs	r0, r0, r7
 8000d7e:	4540      	cmp	r0, r8
 8000d80:	d9f4      	bls.n	8000d6c <HAL_RCC_ClockConfig+0x15c>
 8000d82:	e7dd      	b.n	8000d40 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d84:	f7ff fa18 	bl	80001b8 <HAL_GetTick>
 8000d88:	1bc0      	subs	r0, r0, r7
 8000d8a:	4540      	cmp	r0, r8
 8000d8c:	d8d8      	bhi.n	8000d40 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000d8e:	68a3      	ldr	r3, [r4, #8]
 8000d90:	f013 0f0c 	tst.w	r3, #12
 8000d94:	d1f6      	bne.n	8000d84 <HAL_RCC_ClockConfig+0x174>
 8000d96:	e74a      	b.n	8000c2e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	f022 0201 	bic.w	r2, r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	07da      	lsls	r2, r3, #31
 8000da4:	f53f af7f 	bmi.w	8000ca6 <HAL_RCC_ClockConfig+0x96>
 8000da8:	e748      	b.n	8000c3c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000daa:	4905      	ldr	r1, [pc, #20]	; (8000dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8000dac:	68f0      	ldr	r0, [r6, #12]
 8000dae:	688b      	ldr	r3, [r1, #8]
 8000db0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000db4:	4303      	orrs	r3, r0
 8000db6:	608b      	str	r3, [r1, #8]
 8000db8:	e744      	b.n	8000c44 <HAL_RCC_ClockConfig+0x34>
 8000dba:	bf00      	nop
 8000dbc:	40023c00 	.word	0x40023c00
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	08002d0a 	.word	0x08002d0a
 8000dc8:	20000008 	.word	0x20000008

08000dcc <HAL_RCC_GetHCLKFreq>:
}
 8000dcc:	4b01      	ldr	r3, [pc, #4]	; (8000dd4 <HAL_RCC_GetHCLKFreq+0x8>)
 8000dce:	6818      	ldr	r0, [r3, #0]
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8000dda:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	fa92 f2a2 	rbit	r2, r2
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000dec:	40d3      	lsrs	r3, r2
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000df0:	5cd3      	ldrb	r3, [r2, r3]
 8000df2:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000df4:	6810      	ldr	r0, [r2, #0]
}    
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	08002d1a 	.word	0x08002d1a
 8000e04:	20000008 	.word	0x20000008

08000e08 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e0a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	fa92 f2a2 	rbit	r2, r2
 8000e14:	fab2 f282 	clz	r2, r2
 8000e18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000e1c:	40d3      	lsrs	r3, r2
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000e20:	5cd3      	ldrb	r3, [r2, r3]
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000e24:	6810      	ldr	r0, [r2, #0]
} 
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	08002d1a 	.word	0x08002d1a
 8000e34:	20000008 	.word	0x20000008

08000e38 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e38:	230f      	movs	r3, #15
 8000e3a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_RCC_GetClockConfig+0x34>)
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	f002 0203 	and.w	r2, r2, #3
 8000e44:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000e4c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000e54:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000e5e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_RCC_GetClockConfig+0x38>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	600b      	str	r3, [r1, #0]
 8000e6a:	4770      	bx	lr
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40023c00 	.word	0x40023c00

08000e74 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8000e78:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e7a:	d00e      	beq.n	8000e9a <TIM_Base_SetConfig+0x26>
 8000e7c:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <TIM_Base_SetConfig+0x7c>)
 8000e7e:	4290      	cmp	r0, r2
 8000e80:	d00b      	beq.n	8000e9a <TIM_Base_SetConfig+0x26>
 8000e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e86:	4290      	cmp	r0, r2
 8000e88:	d007      	beq.n	8000e9a <TIM_Base_SetConfig+0x26>
 8000e8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e8e:	4290      	cmp	r0, r2
 8000e90:	d003      	beq.n	8000e9a <TIM_Base_SetConfig+0x26>
 8000e92:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8000e96:	4290      	cmp	r0, r2
 8000e98:	d116      	bne.n	8000ec8 <TIM_Base_SetConfig+0x54>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000e9a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000ea0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 8000ea4:	ea43 0302 	orr.w	r3, r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000ea8:	d015      	beq.n	8000ed6 <TIM_Base_SetConfig+0x62>
 8000eaa:	4a11      	ldr	r2, [pc, #68]	; (8000ef0 <TIM_Base_SetConfig+0x7c>)
 8000eac:	4290      	cmp	r0, r2
 8000eae:	d012      	beq.n	8000ed6 <TIM_Base_SetConfig+0x62>
 8000eb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eb4:	4290      	cmp	r0, r2
 8000eb6:	d00e      	beq.n	8000ed6 <TIM_Base_SetConfig+0x62>
 8000eb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ebc:	4290      	cmp	r0, r2
 8000ebe:	d00a      	beq.n	8000ed6 <TIM_Base_SetConfig+0x62>
 8000ec0:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8000ec4:	4290      	cmp	r0, r2
 8000ec6:	d006      	beq.n	8000ed6 <TIM_Base_SetConfig+0x62>
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <TIM_Base_SetConfig+0x80>)
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d003      	beq.n	8000ed6 <TIM_Base_SetConfig+0x62>
 8000ece:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ed2:	4290      	cmp	r0, r2
 8000ed4:	d103      	bne.n	8000ede <TIM_Base_SetConfig+0x6a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ed6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000edc:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8000ede:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000ee0:	688b      	ldr	r3, [r1, #8]
 8000ee2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000ee4:	680b      	ldr	r3, [r1, #0]
 8000ee6:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler */
  TIMx->EGR = TIM_EGR_UG;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	6143      	str	r3, [r0, #20]
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40000400 	.word	0x40000400
 8000ef4:	40010c00 	.word	0x40010c00

08000ef8 <HAL_TIM_Base_MspInit>:
 8000ef8:	4770      	bx	lr

08000efa <HAL_TIM_Base_Init>:
{
 8000efa:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000efc:	4604      	mov	r4, r0
 8000efe:	b1a0      	cbz	r0, 8000f2a <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f00:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000f04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f08:	b91b      	cbnz	r3, 8000f12 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f0a:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    HAL_TIM_Base_MspInit(htim);
 8000f0e:	f7ff fff3 	bl	8000ef8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000f12:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f14:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000f16:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f1a:	1d21      	adds	r1, r4, #4
 8000f1c:	f7ff ffaa 	bl	8000e74 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000f20:	2301      	movs	r3, #1
  return HAL_OK;
 8000f22:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000f24:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000f28:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f2a:	2001      	movs	r0, #1
}
 8000f2c:	bd10      	pop	{r4, pc}

08000f2e <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f2e:	6803      	ldr	r3, [r0, #0]
}
 8000f30:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	f042 0201 	orr.w	r2, r2, #1
 8000f38:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	f042 0201 	orr.w	r2, r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
}
 8000f42:	4770      	bx	lr

08000f44 <HAL_TIM_OC_DelayElapsedCallback>:
 8000f44:	4770      	bx	lr

08000f46 <HAL_TIM_IC_CaptureCallback>:
 8000f46:	4770      	bx	lr

08000f48 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000f48:	4770      	bx	lr

08000f4a <HAL_TIM_TriggerCallback>:
 8000f4a:	4770      	bx	lr

08000f4c <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f4c:	6803      	ldr	r3, [r0, #0]
{
 8000f4e:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f50:	691a      	ldr	r2, [r3, #16]
{
 8000f52:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f54:	0791      	lsls	r1, r2, #30
 8000f56:	d50e      	bpl.n	8000f76 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000f58:	68da      	ldr	r2, [r3, #12]
 8000f5a:	0792      	lsls	r2, r2, #30
 8000f5c:	d50b      	bpl.n	8000f76 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000f5e:	f06f 0202 	mvn.w	r2, #2
 8000f62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f64:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000f66:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f68:	7502      	strb	r2, [r0, #20]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000f6a:	0799      	lsls	r1, r3, #30
 8000f6c:	d05c      	beq.n	8001028 <HAL_TIM_IRQHandler+0xdc>
          HAL_TIM_IC_CaptureCallback(htim);
 8000f6e:	f7ff ffea 	bl	8000f46 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f72:	2300      	movs	r3, #0
 8000f74:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	691a      	ldr	r2, [r3, #16]
 8000f7a:	0752      	lsls	r2, r2, #29
 8000f7c:	d510      	bpl.n	8000fa0 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	0750      	lsls	r0, r2, #29
 8000f82:	d50d      	bpl.n	8000fa0 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000f84:	f06f 0204 	mvn.w	r2, #4
 8000f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f8a:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000f8c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f8e:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000f90:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000f94:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000f96:	d04d      	beq.n	8001034 <HAL_TIM_IRQHandler+0xe8>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f98:	f7ff ffd5 	bl	8000f46 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000fa0:	6823      	ldr	r3, [r4, #0]
 8000fa2:	691a      	ldr	r2, [r3, #16]
 8000fa4:	0711      	lsls	r1, r2, #28
 8000fa6:	d50f      	bpl.n	8000fc8 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	0712      	lsls	r2, r2, #28
 8000fac:	d50c      	bpl.n	8000fc8 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000fae:	f06f 0208 	mvn.w	r2, #8
 8000fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000fb4:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000fb6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000fb8:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000fba:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8000fbc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000fbe:	d03f      	beq.n	8001040 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8000fc0:	f7ff ffc1 	bl	8000f46 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	691a      	ldr	r2, [r3, #16]
 8000fcc:	06d0      	lsls	r0, r2, #27
 8000fce:	d510      	bpl.n	8000ff2 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	06d1      	lsls	r1, r2, #27
 8000fd4:	d50d      	bpl.n	8000ff2 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000fd6:	f06f 0210 	mvn.w	r2, #16
 8000fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000fdc:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000fde:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000fe0:	7522      	strb	r2, [r4, #20]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000fe2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000fe6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000fe8:	d030      	beq.n	800104c <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 8000fea:	f7ff ffac 	bl	8000f46 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	7523      	strb	r3, [r4, #20]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000ff2:	6823      	ldr	r3, [r4, #0]
 8000ff4:	691a      	ldr	r2, [r3, #16]
 8000ff6:	07d2      	lsls	r2, r2, #31
 8000ff8:	d508      	bpl.n	800100c <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	07d0      	lsls	r0, r2, #31
 8000ffe:	d505      	bpl.n	800100c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001000:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001004:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001006:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001008:	f001 f8c6 	bl	8002198 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800100c:	6823      	ldr	r3, [r4, #0]
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	0651      	lsls	r1, r2, #25
 8001012:	d508      	bpl.n	8001026 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	0652      	lsls	r2, r2, #25
 8001018:	d505      	bpl.n	8001026 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800101a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800101e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001020:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001022:	f7ff ff92 	bl	8000f4a <HAL_TIM_TriggerCallback>
 8001026:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001028:	f7ff ff8c 	bl	8000f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800102c:	4620      	mov	r0, r4
 800102e:	f7ff ff8b 	bl	8000f48 <HAL_TIM_PWM_PulseFinishedCallback>
 8001032:	e79e      	b.n	8000f72 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001034:	f7ff ff86 	bl	8000f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001038:	4620      	mov	r0, r4
 800103a:	f7ff ff85 	bl	8000f48 <HAL_TIM_PWM_PulseFinishedCallback>
 800103e:	e7ad      	b.n	8000f9c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001040:	f7ff ff80 	bl	8000f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001044:	4620      	mov	r0, r4
 8001046:	f7ff ff7f 	bl	8000f48 <HAL_TIM_PWM_PulseFinishedCallback>
 800104a:	e7bb      	b.n	8000fc4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800104c:	f7ff ff7a 	bl	8000f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001050:	4620      	mov	r0, r4
 8001052:	f7ff ff79 	bl	8000f48 <HAL_TIM_PWM_PulseFinishedCallback>
 8001056:	e7ca      	b.n	8000fee <HAL_TIM_IRQHandler+0xa2>

08001058 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800105c:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800105e:	6805      	ldr	r5, [r0, #0]
 8001060:	68c2      	ldr	r2, [r0, #12]
 8001062:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001064:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001066:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800106a:	4313      	orrs	r3, r2
 800106c:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800106e:	6883      	ldr	r3, [r0, #8]
 8001070:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8001072:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001074:	4303      	orrs	r3, r0
 8001076:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800107a:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800107e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8001080:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001084:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001086:	4313      	orrs	r3, r2
 8001088:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800108a:	696b      	ldr	r3, [r5, #20]
 800108c:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8001090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001094:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001096:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800109a:	616b      	str	r3, [r5, #20]
 800109c:	4b7e      	ldr	r3, [pc, #504]	; (8001298 <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800109e:	d17f      	bne.n	80011a0 <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 80010a0:	429d      	cmp	r5, r3
 80010a2:	f04f 0419 	mov.w	r4, #25
 80010a6:	d147      	bne.n	8001138 <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80010a8:	f7ff feae 	bl	8000e08 <HAL_RCC_GetPCLK2Freq>
 80010ac:	fb04 f300 	mul.w	r3, r4, r0
 80010b0:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80010b4:	f04f 0864 	mov.w	r8, #100	; 0x64
 80010b8:	007f      	lsls	r7, r7, #1
 80010ba:	fbb3 f3f7 	udiv	r3, r3, r7
 80010be:	fbb3 f3f8 	udiv	r3, r3, r8
 80010c2:	011f      	lsls	r7, r3, #4
 80010c4:	f7ff fea0 	bl	8000e08 <HAL_RCC_GetPCLK2Freq>
 80010c8:	4360      	muls	r0, r4
 80010ca:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fbb0 f6f3 	udiv	r6, r0, r3
 80010d4:	f7ff fe98 	bl	8000e08 <HAL_RCC_GetPCLK2Freq>
 80010d8:	4360      	muls	r0, r4
 80010da:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80010e4:	fbb3 f3f8 	udiv	r3, r3, r8
 80010e8:	fb08 6313 	mls	r3, r8, r3, r6
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	3332      	adds	r3, #50	; 0x32
 80010f0:	fbb3 f3f8 	udiv	r3, r3, r8
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 80010fa:	f7ff fe85 	bl	8000e08 <HAL_RCC_GetPCLK2Freq>
 80010fe:	4360      	muls	r0, r4
 8001100:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001104:	0052      	lsls	r2, r2, #1
 8001106:	fbb0 faf2 	udiv	sl, r0, r2
 800110a:	f7ff fe7d 	bl	8000e08 <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800110e:	4360      	muls	r0, r4
 8001110:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fbb0 f3f3 	udiv	r3, r0, r3
 800111a:	fbb3 f3f8 	udiv	r3, r3, r8
 800111e:	fb08 a313 	mls	r3, r8, r3, sl
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	3332      	adds	r3, #50	; 0x32
 8001126:	fbb3 f3f8 	udiv	r3, r3, r8
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001130:	4433      	add	r3, r6
 8001132:	60ab      	str	r3, [r5, #8]
 8001134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001138:	f7ff fe4e 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 800113c:	fb04 f300 	mul.w	r3, r4, r0
 8001140:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001144:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001148:	007f      	lsls	r7, r7, #1
 800114a:	fbb3 f3f7 	udiv	r3, r3, r7
 800114e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001152:	011f      	lsls	r7, r3, #4
 8001154:	f7ff fe40 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 8001158:	4360      	muls	r0, r4
 800115a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fbb0 f6f3 	udiv	r6, r0, r3
 8001164:	f7ff fe38 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 8001168:	4360      	muls	r0, r4
 800116a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fbb0 f3f3 	udiv	r3, r0, r3
 8001174:	fbb3 f3f8 	udiv	r3, r3, r8
 8001178:	fb08 6313 	mls	r3, r8, r3, r6
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	3332      	adds	r3, #50	; 0x32
 8001180:	fbb3 f3f8 	udiv	r3, r3, r8
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 800118a:	f7ff fe25 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 800118e:	4360      	muls	r0, r4
 8001190:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001194:	0052      	lsls	r2, r2, #1
 8001196:	fbb0 faf2 	udiv	sl, r0, r2
 800119a:	f7ff fe1d 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 800119e:	e7b6      	b.n	800110e <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 80011a0:	429d      	cmp	r5, r3
 80011a2:	f04f 0419 	mov.w	r4, #25
 80011a6:	d143      	bne.n	8001230 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80011a8:	f7ff fe2e 	bl	8000e08 <HAL_RCC_GetPCLK2Freq>
 80011ac:	fb04 f300 	mul.w	r3, r4, r0
 80011b0:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80011b4:	f04f 0864 	mov.w	r8, #100	; 0x64
 80011b8:	00b6      	lsls	r6, r6, #2
 80011ba:	fbb3 f3f6 	udiv	r3, r3, r6
 80011be:	fbb3 f3f8 	udiv	r3, r3, r8
 80011c2:	011e      	lsls	r6, r3, #4
 80011c4:	f7ff fe20 	bl	8000e08 <HAL_RCC_GetPCLK2Freq>
 80011c8:	4360      	muls	r0, r4
 80011ca:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	fbb0 f7f3 	udiv	r7, r0, r3
 80011d4:	f7ff fe18 	bl	8000e08 <HAL_RCC_GetPCLK2Freq>
 80011d8:	4360      	muls	r0, r4
 80011da:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80011e4:	fbb3 f3f8 	udiv	r3, r3, r8
 80011e8:	fb08 7313 	mls	r3, r8, r3, r7
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	3332      	adds	r3, #50	; 0x32
 80011f0:	fbb3 f3f8 	udiv	r3, r3, r8
 80011f4:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80011f8:	f7ff fe06 	bl	8000e08 <HAL_RCC_GetPCLK2Freq>
 80011fc:	4360      	muls	r0, r4
 80011fe:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	fbb0 faf2 	udiv	sl, r0, r2
 8001208:	f7ff fdfe 	bl	8000e08 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800120c:	4360      	muls	r0, r4
 800120e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	fbb0 f3f3 	udiv	r3, r0, r3
 8001218:	fbb3 f3f8 	udiv	r3, r3, r8
 800121c:	fb08 a313 	mls	r3, r8, r3, sl
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	3332      	adds	r3, #50	; 0x32
 8001224:	fbb3 f3f8 	udiv	r3, r3, r8
 8001228:	f003 030f 	and.w	r3, r3, #15
 800122c:	433b      	orrs	r3, r7
 800122e:	e77f      	b.n	8001130 <UART_SetConfig+0xd8>
 8001230:	f7ff fdd2 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 8001234:	fb04 f300 	mul.w	r3, r4, r0
 8001238:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800123c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001240:	00b6      	lsls	r6, r6, #2
 8001242:	fbb3 f3f6 	udiv	r3, r3, r6
 8001246:	fbb3 f3f8 	udiv	r3, r3, r8
 800124a:	011e      	lsls	r6, r3, #4
 800124c:	f7ff fdc4 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 8001250:	4360      	muls	r0, r4
 8001252:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	fbb0 f7f3 	udiv	r7, r0, r3
 800125c:	f7ff fdbc 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 8001260:	4360      	muls	r0, r4
 8001262:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	fbb0 f3f3 	udiv	r3, r0, r3
 800126c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001270:	fb08 7313 	mls	r3, r8, r3, r7
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	3332      	adds	r3, #50	; 0x32
 8001278:	fbb3 f3f8 	udiv	r3, r3, r8
 800127c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001280:	f7ff fdaa 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 8001284:	4360      	muls	r0, r4
 8001286:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	fbb0 faf2 	udiv	sl, r0, r2
 8001290:	f7ff fda2 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
 8001294:	e7ba      	b.n	800120c <UART_SetConfig+0x1b4>
 8001296:	bf00      	nop
 8001298:	40013800 	.word	0x40013800

0800129c <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 800129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129e:	4604      	mov	r4, r0
 80012a0:	460e      	mov	r6, r1
 80012a2:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 80012a4:	f7fe ff88 	bl	80001b8 <HAL_GetTick>
 80012a8:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80012aa:	6822      	ldr	r2, [r4, #0]
 80012ac:	6813      	ldr	r3, [r2, #0]
 80012ae:	ea36 0303 	bics.w	r3, r6, r3
 80012b2:	d101      	bne.n	80012b8 <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 80012b4:	2000      	movs	r0, #0
}
 80012b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 80012b8:	1c6b      	adds	r3, r5, #1
 80012ba:	d0f7      	beq.n	80012ac <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80012bc:	b9c5      	cbnz	r5, 80012f0 <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80012be:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 80012c0:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c8:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	f022 0220 	bic.w	r2, r2, #32
 80012d0:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012d8:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80012da:	695a      	ldr	r2, [r3, #20]
 80012dc:	f022 0201 	bic.w	r2, r2, #1
 80012e0:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 80012e8:	2300      	movs	r3, #0
 80012ea:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80012ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80012f0:	f7fe ff62 	bl	80001b8 <HAL_GetTick>
 80012f4:	1bc0      	subs	r0, r0, r7
 80012f6:	4285      	cmp	r5, r0
 80012f8:	d2d7      	bcs.n	80012aa <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 80012fa:	e7e0      	b.n	80012be <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

080012fc <HAL_UART_Init>:
{
 80012fc:	b510      	push	{r4, lr}
  if(huart == NULL)
 80012fe:	4604      	mov	r4, r0
 8001300:	b330      	cbz	r0, 8001350 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 8001302:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001306:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800130a:	b91b      	cbnz	r3, 8001314 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800130c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001310:	f000 ff9c 	bl	800224c <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8001314:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 8001316:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8001318:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800131c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800131e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001320:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001324:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001326:	f7ff fe97 	bl	8001058 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800132a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800132c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001336:	695a      	ldr	r2, [r3, #20]
 8001338:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800133c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001344:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 8001346:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001348:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800134a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800134e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001350:	2001      	movs	r0, #1
}
 8001352:	bd10      	pop	{r4, pc}

08001354 <HAL_UART_Transmit>:
{
 8001354:	b570      	push	{r4, r5, r6, lr}
 8001356:	460d      	mov	r5, r1
  tmp_state = huart->State;
 8001358:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 800135c:	4604      	mov	r4, r0
  tmp_state = huart->State;
 800135e:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001360:	2901      	cmp	r1, #1
{
 8001362:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8001364:	d001      	beq.n	800136a <HAL_UART_Transmit+0x16>
 8001366:	2922      	cmp	r1, #34	; 0x22
 8001368:	d14d      	bne.n	8001406 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 800136a:	2d00      	cmp	r5, #0
 800136c:	d049      	beq.n	8001402 <HAL_UART_Transmit+0xae>
 800136e:	2a00      	cmp	r2, #0
 8001370:	d047      	beq.n	8001402 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001372:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001376:	2b01      	cmp	r3, #1
 8001378:	d045      	beq.n	8001406 <HAL_UART_Transmit+0xb2>
 800137a:	2301      	movs	r3, #1
 800137c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001380:	2300      	movs	r3, #0
 8001382:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8001384:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 8001388:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 800138a:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 800138c:	bf0c      	ite	eq
 800138e:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001390:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 8001392:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001394:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 8001398:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800139a:	b98a      	cbnz	r2, 80013c0 <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 800139c:	4632      	mov	r2, r6
 800139e:	2140      	movs	r1, #64	; 0x40
 80013a0:	4620      	mov	r0, r4
 80013a2:	f7ff ff7b 	bl	800129c <UART_WaitOnFlagUntilTimeout.constprop.1>
 80013a6:	b9c0      	cbnz	r0, 80013da <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80013a8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80013ac:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 80013ae:	bf0c      	ite	eq
 80013b0:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 80013b2:	2301      	movne	r3, #1
 80013b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80013b8:	2300      	movs	r3, #0
 80013ba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 80013be:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013c0:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 80013c2:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 80013c8:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80013ca:	f04f 0180 	mov.w	r1, #128	; 0x80
 80013ce:	4632      	mov	r2, r6
 80013d0:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013d2:	d10d      	bne.n	80013f0 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80013d4:	f7ff ff62 	bl	800129c <UART_WaitOnFlagUntilTimeout.constprop.1>
 80013d8:	b108      	cbz	r0, 80013de <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80013da:	2003      	movs	r0, #3
 80013dc:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80013de:	882b      	ldrh	r3, [r5, #0]
 80013e0:	6822      	ldr	r2, [r4, #0]
 80013e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013e6:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80013e8:	6923      	ldr	r3, [r4, #16]
 80013ea:	b943      	cbnz	r3, 80013fe <HAL_UART_Transmit+0xaa>
          pData +=2;
 80013ec:	3502      	adds	r5, #2
 80013ee:	e7d3      	b.n	8001398 <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80013f0:	f7ff ff54 	bl	800129c <UART_WaitOnFlagUntilTimeout.constprop.1>
 80013f4:	2800      	cmp	r0, #0
 80013f6:	d1f0      	bne.n	80013da <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80013f8:	6823      	ldr	r3, [r4, #0]
 80013fa:	782a      	ldrb	r2, [r5, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	3501      	adds	r5, #1
 8001400:	e7ca      	b.n	8001398 <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 8001402:	2001      	movs	r0, #1
 8001404:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8001406:	2002      	movs	r0, #2
}
 8001408:	bd70      	pop	{r4, r5, r6, pc}

0800140a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800140a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800140c:	f000 fb90 	bl	8001b30 <vTaskStartScheduler>
  
  return osOK;
}
 8001410:	2000      	movs	r0, #0
 8001412:	bd08      	pop	{r3, pc}

08001414 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001414:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001416:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800141a:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800141c:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800141e:	bf08      	it	eq
 8001420:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001422:	8a02      	ldrh	r2, [r0, #16]
    fpriority += (priority - osPriorityIdle);
 8001424:	bf18      	it	ne
 8001426:	3403      	addne	r4, #3
{
 8001428:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800142a:	e890 0022 	ldmia.w	r0, {r1, r5}
 800142e:	a803      	add	r0, sp, #12
 8001430:	9001      	str	r0, [sp, #4]
 8001432:	9400      	str	r4, [sp, #0]
 8001434:	4628      	mov	r0, r5
 8001436:	f000 faab 	bl	8001990 <xTaskCreate>
 800143a:	2801      	cmp	r0, #1
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 800143c:	bf14      	ite	ne
 800143e:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
 8001440:	9803      	ldreq	r0, [sp, #12]
}
 8001442:	b005      	add	sp, #20
 8001444:	bd30      	pop	{r4, r5, pc}

08001446 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001446:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001448:	f000 fd58 	bl	8001efc <xTaskGetSchedulerState>
 800144c:	2801      	cmp	r0, #1
 800144e:	d003      	beq.n	8001458 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001450:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8001454:	f000 b8e6 	b.w	8001624 <xPortSysTickHandler>
 8001458:	bd08      	pop	{r3, pc}

0800145a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800145a:	f100 0308 	add.w	r3, r0, #8
 800145e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001464:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001466:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001468:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800146a:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800146c:	6003      	str	r3, [r0, #0]
 800146e:	4770      	bx	lr

08001470 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001470:	2300      	movs	r3, #0
 8001472:	6103      	str	r3, [r0, #16]
 8001474:	4770      	bx	lr

08001476 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001476:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001478:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800147a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800147c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001482:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001484:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001486:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001488:	3301      	adds	r3, #1
 800148a:	6003      	str	r3, [r0, #0]
 800148c:	4770      	bx	lr

0800148e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800148e:	680a      	ldr	r2, [r1, #0]
{
 8001490:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001492:	1c53      	adds	r3, r2, #1
 8001494:	d10a      	bne.n	80014ac <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001496:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800149c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800149e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80014a0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80014a2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80014a4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80014a6:	3301      	adds	r3, #1
 80014a8:	6003      	str	r3, [r0, #0]
 80014aa:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014ac:	f100 0308 	add.w	r3, r0, #8
 80014b0:	685c      	ldr	r4, [r3, #4]
 80014b2:	6825      	ldr	r5, [r4, #0]
 80014b4:	42aa      	cmp	r2, r5
 80014b6:	d3ef      	bcc.n	8001498 <vListInsert+0xa>
 80014b8:	4623      	mov	r3, r4
 80014ba:	e7f9      	b.n	80014b0 <vListInsert+0x22>

080014bc <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80014bc:	6841      	ldr	r1, [r0, #4]
 80014be:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80014c0:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80014c2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80014c4:	6882      	ldr	r2, [r0, #8]
 80014c6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80014c8:	6859      	ldr	r1, [r3, #4]
 80014ca:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80014cc:	bf08      	it	eq
 80014ce:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80014d0:	2200      	movs	r2, #0
 80014d2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	3801      	subs	r0, #1
 80014d8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80014da:	4770      	bx	lr

080014dc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <prvTaskExitError+0x2c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	d008      	beq.n	80014f6 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80014e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e8:	f383 8811 	msr	BASEPRI, r3
 80014ec:	f3bf 8f6f 	isb	sy
 80014f0:	f3bf 8f4f 	dsb	sy
 80014f4:	e7fe      	b.n	80014f4 <prvTaskExitError+0x18>
 80014f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014fa:	f383 8811 	msr	BASEPRI, r3
 80014fe:	f3bf 8f6f 	isb	sy
 8001502:	f3bf 8f4f 	dsb	sy
 8001506:	e7fe      	b.n	8001506 <prvTaskExitError+0x2a>
 8001508:	20000000 	.word	0x20000000

0800150c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800150c:	4806      	ldr	r0, [pc, #24]	; (8001528 <prvPortStartFirstTask+0x1c>)
 800150e:	6800      	ldr	r0, [r0, #0]
 8001510:	6800      	ldr	r0, [r0, #0]
 8001512:	f380 8808 	msr	MSP, r0
 8001516:	b662      	cpsie	i
 8001518:	b661      	cpsie	f
 800151a:	f3bf 8f4f 	dsb	sy
 800151e:	f3bf 8f6f 	isb	sy
 8001522:	df00      	svc	0
 8001524:	bf00      	nop
 8001526:	0000      	.short	0x0000
 8001528:	e000ed08 	.word	0xe000ed08

0800152c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800152c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001530:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001536:	f021 0101 	bic.w	r1, r1, #1
 800153a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800153e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001542:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8001546:	3840      	subs	r0, #64	; 0x40
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	080014dd 	.word	0x080014dd

08001550 <SVC_Handler>:
	__asm volatile (
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <pxCurrentTCBConst2>)
 8001552:	6819      	ldr	r1, [r3, #0]
 8001554:	6808      	ldr	r0, [r1, #0]
 8001556:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800155a:	f380 8809 	msr	PSP, r0
 800155e:	f3bf 8f6f 	isb	sy
 8001562:	f04f 0000 	mov.w	r0, #0
 8001566:	f380 8811 	msr	BASEPRI, r0
 800156a:	f04e 0e0d 	orr.w	lr, lr, #13
 800156e:	4770      	bx	lr

08001570 <pxCurrentTCBConst2>:
 8001570:	20000cac 	.word	0x20000cac

08001574 <vPortEnterCritical>:
 8001574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001578:	f383 8811 	msr	BASEPRI, r3
 800157c:	f3bf 8f6f 	isb	sy
 8001580:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <vPortEnterCritical+0x3c>)
 8001586:	6813      	ldr	r3, [r2, #0]
 8001588:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800158a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800158c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800158e:	d10d      	bne.n	80015ac <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <vPortEnterCritical+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001598:	d008      	beq.n	80015ac <vPortEnterCritical+0x38>
 800159a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800159e:	f383 8811 	msr	BASEPRI, r3
 80015a2:	f3bf 8f6f 	isb	sy
 80015a6:	f3bf 8f4f 	dsb	sy
 80015aa:	e7fe      	b.n	80015aa <vPortEnterCritical+0x36>
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000000 	.word	0x20000000
 80015b4:	e000ed04 	.word	0xe000ed04

080015b8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80015b8:	4a08      	ldr	r2, [pc, #32]	; (80015dc <vPortExitCritical+0x24>)
 80015ba:	6813      	ldr	r3, [r2, #0]
 80015bc:	b943      	cbnz	r3, 80015d0 <vPortExitCritical+0x18>
 80015be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c2:	f383 8811 	msr	BASEPRI, r3
 80015c6:	f3bf 8f6f 	isb	sy
 80015ca:	f3bf 8f4f 	dsb	sy
 80015ce:	e7fe      	b.n	80015ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80015d0:	3b01      	subs	r3, #1
 80015d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80015d4:	b90b      	cbnz	r3, 80015da <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80015d6:	f383 8811 	msr	BASEPRI, r3
 80015da:	4770      	bx	lr
 80015dc:	20000000 	.word	0x20000000

080015e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80015e0:	f3ef 8009 	mrs	r0, PSP
 80015e4:	f3bf 8f6f 	isb	sy
 80015e8:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <pxCurrentTCBConst>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80015f0:	6010      	str	r0, [r2, #0]
 80015f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80015f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80015fa:	f380 8811 	msr	BASEPRI, r0
 80015fe:	f000 fc43 	bl	8001e88 <vTaskSwitchContext>
 8001602:	f04f 0000 	mov.w	r0, #0
 8001606:	f380 8811 	msr	BASEPRI, r0
 800160a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800160e:	6819      	ldr	r1, [r3, #0]
 8001610:	6808      	ldr	r0, [r1, #0]
 8001612:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001616:	f380 8809 	msr	PSP, r0
 800161a:	f3bf 8f6f 	isb	sy
 800161e:	4770      	bx	lr

08001620 <pxCurrentTCBConst>:
 8001620:	20000cac 	.word	0x20000cac

08001624 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001624:	b508      	push	{r3, lr}
	__asm volatile
 8001626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800162a:	f383 8811 	msr	BASEPRI, r3
 800162e:	f3bf 8f6f 	isb	sy
 8001632:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001636:	f000 fabf 	bl	8001bb8 <xTaskIncrementTick>
 800163a:	b118      	cbz	r0, 8001644 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800163c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001640:	4b02      	ldr	r3, [pc, #8]	; (800164c <xPortSysTickHandler+0x28>)
 8001642:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001644:	2300      	movs	r3, #0
 8001646:	f383 8811 	msr	BASEPRI, r3
 800164a:	bd08      	pop	{r3, pc}
 800164c:	e000ed04 	.word	0xe000ed04

08001650 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <vPortSetupTimerInterrupt+0x1c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	fbb3 f3f2 	udiv	r3, r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <vPortSetupTimerInterrupt+0x20>)
 800165e:	3b01      	subs	r3, #1
 8001660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001662:	2207      	movs	r2, #7
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <vPortSetupTimerInterrupt+0x24>)
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008
 8001670:	e000e014 	.word	0xe000e014
 8001674:	e000e010 	.word	0xe000e010

08001678 <xPortStartScheduler>:
{
 8001678:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800167a:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800167c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001684:	22ff      	movs	r2, #255	; 0xff
 8001686:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001688:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800168a:	4a1c      	ldr	r2, [pc, #112]	; (80016fc <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001692:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001696:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800169a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800169c:	2207      	movs	r2, #7
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <xPortStartScheduler+0x88>)
 80016a0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80016a2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80016a6:	1e54      	subs	r4, r2, #1
 80016a8:	0600      	lsls	r0, r0, #24
 80016aa:	d41c      	bmi.n	80016e6 <xPortStartScheduler+0x6e>
 80016ac:	b101      	cbz	r1, 80016b0 <xPortStartScheduler+0x38>
 80016ae:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80016b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80016b8:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80016ba:	9b01      	ldr	r3, [sp, #4]
 80016bc:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <xPortStartScheduler+0x80>)
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <xPortStartScheduler+0x8c>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80016ca:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80016d2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80016d4:	f7ff ffbc 	bl	8001650 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80016d8:	2200      	movs	r2, #0
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <xPortStartScheduler+0x90>)
 80016dc:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 80016de:	f7ff ff15 	bl	800150c <prvPortStartFirstTask>
	prvTaskExitError();
 80016e2:	f7ff fefb 	bl	80014dc <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80016e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80016ea:	2101      	movs	r1, #1
 80016ec:	0052      	lsls	r2, r2, #1
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	f88d 2003 	strb.w	r2, [sp, #3]
 80016f4:	4622      	mov	r2, r4
 80016f6:	e7d4      	b.n	80016a2 <xPortStartScheduler+0x2a>
 80016f8:	e000e400 	.word	0xe000e400
 80016fc:	2000008c 	.word	0x2000008c
 8001700:	20000090 	.word	0x20000090
 8001704:	e000ed20 	.word	0xe000ed20
 8001708:	20000000 	.word	0x20000000

0800170c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800170c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <prvInsertBlockIntoFreeList+0x40>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4282      	cmp	r2, r0
 8001714:	d318      	bcc.n	8001748 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001716:	685c      	ldr	r4, [r3, #4]
 8001718:	1919      	adds	r1, r3, r4
 800171a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800171c:	bf01      	itttt	eq
 800171e:	6841      	ldreq	r1, [r0, #4]
 8001720:	4618      	moveq	r0, r3
 8001722:	1909      	addeq	r1, r1, r4
 8001724:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001726:	6844      	ldr	r4, [r0, #4]
 8001728:	1901      	adds	r1, r0, r4
 800172a:	428a      	cmp	r2, r1
 800172c:	d107      	bne.n	800173e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800172e:	4908      	ldr	r1, [pc, #32]	; (8001750 <prvInsertBlockIntoFreeList+0x44>)
 8001730:	6809      	ldr	r1, [r1, #0]
 8001732:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001734:	bf1f      	itttt	ne
 8001736:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001738:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800173a:	1909      	addne	r1, r1, r4
 800173c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800173e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001740:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001742:	bf18      	it	ne
 8001744:	6018      	strne	r0, [r3, #0]
 8001746:	bd10      	pop	{r4, pc}
 8001748:	4613      	mov	r3, r2
 800174a:	e7e1      	b.n	8001710 <prvInsertBlockIntoFreeList+0x4>
 800174c:	20000ca4 	.word	0x20000ca4
 8001750:	20000094 	.word	0x20000094

08001754 <pvPortMalloc>:
{
 8001754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001758:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800175a:	f000 fa25 	bl	8001ba8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800175e:	493e      	ldr	r1, [pc, #248]	; (8001858 <pvPortMalloc+0x104>)
 8001760:	4d3e      	ldr	r5, [pc, #248]	; (800185c <pvPortMalloc+0x108>)
 8001762:	680b      	ldr	r3, [r1, #0]
 8001764:	bb0b      	cbnz	r3, 80017aa <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001766:	4a3e      	ldr	r2, [pc, #248]	; (8001860 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001768:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800176a:	bf1d      	ittte	ne
 800176c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800176e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001772:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001776:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800177a:	bf1c      	itt	ne
 800177c:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800177e:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 8001780:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001782:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001784:	4e37      	ldr	r6, [pc, #220]	; (8001864 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8001786:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001788:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800178c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800178e:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001790:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001792:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8001794:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001796:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001798:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800179a:	4b33      	ldr	r3, [pc, #204]	; (8001868 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800179c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800179e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017a0:	4b32      	ldr	r3, [pc, #200]	; (800186c <pvPortMalloc+0x118>)
 80017a2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80017a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017a8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80017aa:	682f      	ldr	r7, [r5, #0]
 80017ac:	4227      	tst	r7, r4
 80017ae:	d116      	bne.n	80017de <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80017b0:	2c00      	cmp	r4, #0
 80017b2:	d040      	beq.n	8001836 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 80017b4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017b8:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80017ba:	bf1c      	itt	ne
 80017bc:	f023 0307 	bicne.w	r3, r3, #7
 80017c0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80017c2:	b163      	cbz	r3, 80017de <pvPortMalloc+0x8a>
 80017c4:	4a29      	ldr	r2, [pc, #164]	; (800186c <pvPortMalloc+0x118>)
 80017c6:	6816      	ldr	r6, [r2, #0]
 80017c8:	4690      	mov	r8, r2
 80017ca:	42b3      	cmp	r3, r6
 80017cc:	d807      	bhi.n	80017de <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80017ce:	4a25      	ldr	r2, [pc, #148]	; (8001864 <pvPortMalloc+0x110>)
 80017d0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017d2:	6868      	ldr	r0, [r5, #4]
 80017d4:	4283      	cmp	r3, r0
 80017d6:	d804      	bhi.n	80017e2 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80017d8:	6809      	ldr	r1, [r1, #0]
 80017da:	428d      	cmp	r5, r1
 80017dc:	d107      	bne.n	80017ee <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80017de:	2400      	movs	r4, #0
 80017e0:	e029      	b.n	8001836 <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017e2:	682c      	ldr	r4, [r5, #0]
 80017e4:	2c00      	cmp	r4, #0
 80017e6:	d0f7      	beq.n	80017d8 <pvPortMalloc+0x84>
 80017e8:	462a      	mov	r2, r5
 80017ea:	4625      	mov	r5, r4
 80017ec:	e7f1      	b.n	80017d2 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80017ee:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80017f0:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80017f2:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80017f4:	1ac2      	subs	r2, r0, r3
 80017f6:	2a10      	cmp	r2, #16
 80017f8:	d90f      	bls.n	800181a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80017fa:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017fc:	0741      	lsls	r1, r0, #29
 80017fe:	d008      	beq.n	8001812 <pvPortMalloc+0xbe>
	__asm volatile
 8001800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001804:	f383 8811 	msr	BASEPRI, r3
 8001808:	f3bf 8f6f 	isb	sy
 800180c:	f3bf 8f4f 	dsb	sy
 8001810:	e7fe      	b.n	8001810 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001812:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001814:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001816:	f7ff ff79 	bl	800170c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800181a:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800181c:	4912      	ldr	r1, [pc, #72]	; (8001868 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800181e:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001820:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8001822:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001824:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001826:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800182a:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800182c:	bf38      	it	cc
 800182e:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001830:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001832:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001834:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001836:	f000 fa51 	bl	8001cdc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800183a:	0763      	lsls	r3, r4, #29
 800183c:	d008      	beq.n	8001850 <pvPortMalloc+0xfc>
 800183e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001842:	f383 8811 	msr	BASEPRI, r3
 8001846:	f3bf 8f6f 	isb	sy
 800184a:	f3bf 8f4f 	dsb	sy
 800184e:	e7fe      	b.n	800184e <pvPortMalloc+0xfa>
}
 8001850:	4620      	mov	r0, r4
 8001852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001856:	bf00      	nop
 8001858:	20000094 	.word	0x20000094
 800185c:	20000c98 	.word	0x20000c98
 8001860:	20000098 	.word	0x20000098
 8001864:	20000ca4 	.word	0x20000ca4
 8001868:	20000ca0 	.word	0x20000ca0
 800186c:	20000c9c 	.word	0x20000c9c

08001870 <vPortFree>:
{
 8001870:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001872:	4604      	mov	r4, r0
 8001874:	b370      	cbz	r0, 80018d4 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001876:	4a18      	ldr	r2, [pc, #96]	; (80018d8 <vPortFree+0x68>)
 8001878:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	4213      	tst	r3, r2
 8001880:	d108      	bne.n	8001894 <vPortFree+0x24>
 8001882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001886:	f383 8811 	msr	BASEPRI, r3
 800188a:	f3bf 8f6f 	isb	sy
 800188e:	f3bf 8f4f 	dsb	sy
 8001892:	e7fe      	b.n	8001892 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001894:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001898:	b141      	cbz	r1, 80018ac <vPortFree+0x3c>
 800189a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800189e:	f383 8811 	msr	BASEPRI, r3
 80018a2:	f3bf 8f6f 	isb	sy
 80018a6:	f3bf 8f4f 	dsb	sy
 80018aa:	e7fe      	b.n	80018aa <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80018ac:	ea23 0302 	bic.w	r3, r3, r2
 80018b0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80018b4:	f000 f978 	bl	8001ba8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80018b8:	4a08      	ldr	r2, [pc, #32]	; (80018dc <vPortFree+0x6c>)
 80018ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80018be:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80018c0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80018c4:	440b      	add	r3, r1
 80018c6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80018c8:	f7ff ff20 	bl	800170c <prvInsertBlockIntoFreeList>
}
 80018cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80018d0:	f000 ba04 	b.w	8001cdc <xTaskResumeAll>
 80018d4:	bd10      	pop	{r4, pc}
 80018d6:	bf00      	nop
 80018d8:	20000c98 	.word	0x20000c98
 80018dc:	20000c9c 	.word	0x20000c9c

080018e0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018e0:	4a06      	ldr	r2, [pc, #24]	; (80018fc <prvResetNextTaskUnblockTime+0x1c>)
 80018e2:	6813      	ldr	r3, [r2, #0]
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <prvResetNextTaskUnblockTime+0x20>)
 80018e8:	b919      	cbnz	r1, 80018f2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80018ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80018f6:	68d2      	ldr	r2, [r2, #12]
 80018f8:	6852      	ldr	r2, [r2, #4]
 80018fa:	e7f8      	b.n	80018ee <prvResetNextTaskUnblockTime+0xe>
 80018fc:	20000cb0 	.word	0x20000cb0
 8001900:	20000d88 	.word	0x20000d88

08001904 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001906:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001908:	4e1b      	ldr	r6, [pc, #108]	; (8001978 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800190a:	681d      	ldr	r5, [r3, #0]
{
 800190c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800190e:	6830      	ldr	r0, [r6, #0]
{
 8001910:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001912:	3004      	adds	r0, #4
 8001914:	f7ff fdd2 	bl	80014bc <uxListRemove>
 8001918:	4633      	mov	r3, r6
 800191a:	b940      	cbnz	r0, 800192e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800191c:	2001      	movs	r0, #1
 800191e:	6831      	ldr	r1, [r6, #0]
 8001920:	4e16      	ldr	r6, [pc, #88]	; (800197c <prvAddCurrentTaskToDelayedList+0x78>)
 8001922:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001924:	6832      	ldr	r2, [r6, #0]
 8001926:	4088      	lsls	r0, r1
 8001928:	ea22 0200 	bic.w	r2, r2, r0
 800192c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800192e:	1c62      	adds	r2, r4, #1
 8001930:	d107      	bne.n	8001942 <prvAddCurrentTaskToDelayedList+0x3e>
 8001932:	b137      	cbz	r7, 8001942 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	4812      	ldr	r0, [pc, #72]	; (8001980 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001938:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800193a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800193e:	f7ff bd9a 	b.w	8001476 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001942:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001944:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001946:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001948:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800194a:	d907      	bls.n	800195c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800194c:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <prvAddCurrentTaskToDelayedList+0x80>)
 800194e:	6810      	ldr	r0, [r2, #0]
 8001950:	6819      	ldr	r1, [r3, #0]
}
 8001952:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001956:	3104      	adds	r1, #4
 8001958:	f7ff bd99 	b.w	800148e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800195c:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <prvAddCurrentTaskToDelayedList+0x84>)
 800195e:	6810      	ldr	r0, [r2, #0]
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	3104      	adds	r1, #4
 8001964:	f7ff fd93 	bl	800148e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <prvAddCurrentTaskToDelayedList+0x88>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800196e:	bf38      	it	cc
 8001970:	601c      	strcc	r4, [r3, #0]
 8001972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001974:	20000dd0 	.word	0x20000dd0
 8001978:	20000cac 	.word	0x20000cac
 800197c:	20000d58 	.word	0x20000d58
 8001980:	20000da8 	.word	0x20000da8
 8001984:	20000cb4 	.word	0x20000cb4
 8001988:	20000cb0 	.word	0x20000cb0
 800198c:	20000d88 	.word	0x20000d88

08001990 <xTaskCreate>:
	{
 8001990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001994:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001998:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800199a:	4650      	mov	r0, sl
	{
 800199c:	460f      	mov	r7, r1
 800199e:	4699      	mov	r9, r3
 80019a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019a2:	f7ff fed7 	bl	8001754 <pvPortMalloc>
			if( pxStack != NULL )
 80019a6:	4605      	mov	r5, r0
 80019a8:	2800      	cmp	r0, #0
 80019aa:	f000 8096 	beq.w	8001ada <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80019ae:	2054      	movs	r0, #84	; 0x54
 80019b0:	f7ff fed0 	bl	8001754 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80019b4:	4604      	mov	r4, r0
 80019b6:	2800      	cmp	r0, #0
 80019b8:	f000 808c 	beq.w	8001ad4 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80019bc:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80019c0:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80019c2:	4455      	add	r5, sl
 80019c4:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80019c6:	f025 0a07 	bic.w	sl, r5, #7
 80019ca:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80019ce:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80019d0:	7859      	ldrb	r1, [r3, #1]
 80019d2:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80019d6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80019da:	b109      	cbz	r1, 80019e0 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019dc:	42bb      	cmp	r3, r7
 80019de:	d1f7      	bne.n	80019d0 <xTaskCreate+0x40>
 80019e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80019e2:	f04f 0b00 	mov.w	fp, #0
 80019e6:	2d06      	cmp	r5, #6
 80019e8:	bf28      	it	cs
 80019ea:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80019ec:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80019ee:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80019f0:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80019f2:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80019f4:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80019f8:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80019fc:	f7ff fd38 	bl	8001470 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a00:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a04:	f104 0018 	add.w	r0, r4, #24
 8001a08:	f7ff fd32 	bl	8001470 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001a0c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a10:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a12:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a14:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001a16:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a1a:	464a      	mov	r2, r9
 8001a1c:	4641      	mov	r1, r8
 8001a1e:	4650      	mov	r0, sl
 8001a20:	f7ff fd84 	bl	800152c <pxPortInitialiseStack>
 8001a24:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001a26:	b106      	cbz	r6, 8001a2a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a28:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8001a2a:	f7ff fda3 	bl	8001574 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001a2e:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001a30:	4e32      	ldr	r6, [pc, #200]	; (8001afc <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001b28 <xTaskCreate+0x198>
 8001a38:	3201      	adds	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001a3c:	6835      	ldr	r5, [r6, #0]
 8001a3e:	2d00      	cmp	r5, #0
 8001a40:	d14e      	bne.n	8001ae0 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001a42:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d11d      	bne.n	8001a86 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001a4a:	eb08 0005 	add.w	r0, r8, r5
 8001a4e:	3514      	adds	r5, #20
 8001a50:	f7ff fd03 	bl	800145a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a54:	2d8c      	cmp	r5, #140	; 0x8c
 8001a56:	d1f8      	bne.n	8001a4a <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001a58:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001b2c <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001a5c:	4d28      	ldr	r5, [pc, #160]	; (8001b00 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001a5e:	4648      	mov	r0, r9
 8001a60:	f7ff fcfb 	bl	800145a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001a64:	4628      	mov	r0, r5
 8001a66:	f7ff fcf8 	bl	800145a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001a6a:	4826      	ldr	r0, [pc, #152]	; (8001b04 <xTaskCreate+0x174>)
 8001a6c:	f7ff fcf5 	bl	800145a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001a70:	4825      	ldr	r0, [pc, #148]	; (8001b08 <xTaskCreate+0x178>)
 8001a72:	f7ff fcf2 	bl	800145a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001a76:	4825      	ldr	r0, [pc, #148]	; (8001b0c <xTaskCreate+0x17c>)
 8001a78:	f7ff fcef 	bl	800145a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001a7c:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <xTaskCreate+0x180>)
 8001a7e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <xTaskCreate+0x184>)
 8001a84:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001a86:	2501      	movs	r5, #1
		uxTaskNumber++;
 8001a88:	4a23      	ldr	r2, [pc, #140]	; (8001b18 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8001a8a:	4924      	ldr	r1, [pc, #144]	; (8001b1c <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8001a8c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001a8e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001a90:	3301      	adds	r3, #1
 8001a92:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001a94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a96:	fa05 f302 	lsl.w	r3, r5, r2
 8001a9a:	4303      	orrs	r3, r0
 8001a9c:	2014      	movs	r0, #20
 8001a9e:	600b      	str	r3, [r1, #0]
 8001aa0:	fb00 8002 	mla	r0, r0, r2, r8
 8001aa4:	4639      	mov	r1, r7
 8001aa6:	f7ff fce6 	bl	8001476 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001aaa:	f7ff fd85 	bl	80015b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <xTaskCreate+0x190>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	b163      	cbz	r3, 8001ace <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001ab4:	6833      	ldr	r3, [r6, #0]
 8001ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d207      	bcs.n	8001ace <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <xTaskCreate+0x194>)
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	f3bf 8f4f 	dsb	sy
 8001aca:	f3bf 8f6f 	isb	sy
	}
 8001ace:	4628      	mov	r0, r5
 8001ad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001ad4:	4628      	mov	r0, r5
 8001ad6:	f7ff fecb 	bl	8001870 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ada:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001ade:	e7f6      	b.n	8001ace <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <xTaskCreate+0x190>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1ce      	bne.n	8001a86 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ae8:	6833      	ldr	r3, [r6, #0]
 8001aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001aee:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001af0:	bf98      	it	ls
 8001af2:	6034      	strls	r4, [r6, #0]
 8001af4:	e7c7      	b.n	8001a86 <xTaskCreate+0xf6>
 8001af6:	bf00      	nop
 8001af8:	20000d44 	.word	0x20000d44
 8001afc:	20000cac 	.word	0x20000cac
 8001b00:	20000d70 	.word	0x20000d70
 8001b04:	20000d90 	.word	0x20000d90
 8001b08:	20000dbc 	.word	0x20000dbc
 8001b0c:	20000da8 	.word	0x20000da8
 8001b10:	20000cb0 	.word	0x20000cb0
 8001b14:	20000cb4 	.word	0x20000cb4
 8001b18:	20000d54 	.word	0x20000d54
 8001b1c:	20000d58 	.word	0x20000d58
 8001b20:	20000da4 	.word	0x20000da4
 8001b24:	e000ed04 	.word	0xe000ed04
 8001b28:	20000cb8 	.word	0x20000cb8
 8001b2c:	20000d5c 	.word	0x20000d5c

08001b30 <vTaskStartScheduler>:
{
 8001b30:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001b32:	2400      	movs	r4, #0
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <vTaskStartScheduler+0x60>)
 8001b36:	9400      	str	r4, [sp, #0]
 8001b38:	9301      	str	r3, [sp, #4]
 8001b3a:	2280      	movs	r2, #128	; 0x80
 8001b3c:	4623      	mov	r3, r4
 8001b3e:	4915      	ldr	r1, [pc, #84]	; (8001b94 <vTaskStartScheduler+0x64>)
 8001b40:	4815      	ldr	r0, [pc, #84]	; (8001b98 <vTaskStartScheduler+0x68>)
 8001b42:	f7ff ff25 	bl	8001990 <xTaskCreate>
	if( xReturn == pdPASS )
 8001b46:	2801      	cmp	r0, #1
 8001b48:	d114      	bne.n	8001b74 <vTaskStartScheduler+0x44>
 8001b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b4e:	f383 8811 	msr	BASEPRI, r3
 8001b52:	f3bf 8f6f 	isb	sy
 8001b56:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001b5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <vTaskStartScheduler+0x6c>)
 8001b60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <vTaskStartScheduler+0x70>)
 8001b64:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <vTaskStartScheduler+0x74>)
 8001b68:	601c      	str	r4, [r3, #0]
}
 8001b6a:	b002      	add	sp, #8
 8001b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001b70:	f7ff bd82 	b.w	8001678 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001b74:	3001      	adds	r0, #1
 8001b76:	d108      	bne.n	8001b8a <vTaskStartScheduler+0x5a>
 8001b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b7c:	f383 8811 	msr	BASEPRI, r3
 8001b80:	f3bf 8f6f 	isb	sy
 8001b84:	f3bf 8f4f 	dsb	sy
 8001b88:	e7fe      	b.n	8001b88 <vTaskStartScheduler+0x58>
}
 8001b8a:	b002      	add	sp, #8
 8001b8c:	bd10      	pop	{r4, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000d84 	.word	0x20000d84
 8001b94:	08002cb8 	.word	0x08002cb8
 8001b98:	08001e15 	.word	0x08001e15
 8001b9c:	20000d88 	.word	0x20000d88
 8001ba0:	20000da4 	.word	0x20000da4
 8001ba4:	20000dd0 	.word	0x20000dd0

08001ba8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001ba8:	4a02      	ldr	r2, [pc, #8]	; (8001bb4 <vTaskSuspendAll+0xc>)
 8001baa:	6813      	ldr	r3, [r2, #0]
 8001bac:	3301      	adds	r3, #1
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000d50 	.word	0x20000d50

08001bb8 <xTaskIncrementTick>:
{
 8001bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bbc:	4b3c      	ldr	r3, [pc, #240]	; (8001cb0 <xTaskIncrementTick+0xf8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d153      	bne.n	8001c6c <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001bc4:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <xTaskIncrementTick+0xfc>)
 8001bc6:	681c      	ldr	r4, [r3, #0]
 8001bc8:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001bca:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8001bcc:	b9bc      	cbnz	r4, 8001bfe <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001bce:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <xTaskIncrementTick+0x100>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	b142      	cbz	r2, 8001be8 <xTaskIncrementTick+0x30>
 8001bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bda:	f383 8811 	msr	BASEPRI, r3
 8001bde:	f3bf 8f6f 	isb	sy
 8001be2:	f3bf 8f4f 	dsb	sy
 8001be6:	e7fe      	b.n	8001be6 <xTaskIncrementTick+0x2e>
 8001be8:	4a34      	ldr	r2, [pc, #208]	; (8001cbc <xTaskIncrementTick+0x104>)
 8001bea:	6819      	ldr	r1, [r3, #0]
 8001bec:	6810      	ldr	r0, [r2, #0]
 8001bee:	6018      	str	r0, [r3, #0]
 8001bf0:	6011      	str	r1, [r2, #0]
 8001bf2:	4a33      	ldr	r2, [pc, #204]	; (8001cc0 <xTaskIncrementTick+0x108>)
 8001bf4:	6813      	ldr	r3, [r2, #0]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	f7ff fe71 	bl	80018e0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001bfe:	4d31      	ldr	r5, [pc, #196]	; (8001cc4 <xTaskIncrementTick+0x10c>)
 8001c00:	f04f 0b00 	mov.w	fp, #0
 8001c04:	682b      	ldr	r3, [r5, #0]
 8001c06:	4f30      	ldr	r7, [pc, #192]	; (8001cc8 <xTaskIncrementTick+0x110>)
 8001c08:	429c      	cmp	r4, r3
 8001c0a:	d33e      	bcc.n	8001c8a <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c0c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001cb8 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001c10:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001cd8 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c14:	f8d8 2000 	ldr.w	r2, [r8]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	bb72      	cbnz	r2, 8001c7a <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c20:	602a      	str	r2, [r5, #0]
					break;
 8001c22:	e032      	b.n	8001c8a <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c24:	f106 0a04 	add.w	sl, r6, #4
 8001c28:	4650      	mov	r0, sl
 8001c2a:	f7ff fc47 	bl	80014bc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c2e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001c30:	b119      	cbz	r1, 8001c3a <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c32:	f106 0018 	add.w	r0, r6, #24
 8001c36:	f7ff fc41 	bl	80014bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f04f 0e14 	mov.w	lr, #20
 8001c40:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001c42:	f8d9 3000 	ldr.w	r3, [r9]
 8001c46:	fa02 f100 	lsl.w	r1, r2, r0
 8001c4a:	4319      	orrs	r1, r3
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <xTaskIncrementTick+0x114>)
 8001c4e:	f8c9 1000 	str.w	r1, [r9]
 8001c52:	fb0e 3000 	mla	r0, lr, r0, r3
 8001c56:	4651      	mov	r1, sl
 8001c58:	f7ff fc0d 	bl	8001476 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c5c:	6838      	ldr	r0, [r7, #0]
 8001c5e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001c60:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001c62:	4291      	cmp	r1, r2
 8001c64:	bf28      	it	cs
 8001c66:	f04f 0b01 	movcs.w	fp, #1
 8001c6a:	e7d3      	b.n	8001c14 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001c6c:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8001c6e:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8001c72:	6813      	ldr	r3, [r2, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e011      	b.n	8001c9e <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c7a:	f8d8 2000 	ldr.w	r2, [r8]
 8001c7e:	68d2      	ldr	r2, [r2, #12]
 8001c80:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001c82:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001c84:	428c      	cmp	r4, r1
 8001c86:	d2cd      	bcs.n	8001c24 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001c88:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <xTaskIncrementTick+0x114>)
 8001c8e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c90:	2214      	movs	r2, #20
 8001c92:	434a      	muls	r2, r1
 8001c94:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001c96:	2a02      	cmp	r2, #2
 8001c98:	bf28      	it	cs
 8001c9a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001c9e:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <xTaskIncrementTick+0x11c>)
 8001ca0:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001ca2:	2a00      	cmp	r2, #0
 8001ca4:	bf18      	it	ne
 8001ca6:	f04f 0b01 	movne.w	fp, #1
}
 8001caa:	4658      	mov	r0, fp
 8001cac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cb0:	20000d50 	.word	0x20000d50
 8001cb4:	20000dd0 	.word	0x20000dd0
 8001cb8:	20000cb0 	.word	0x20000cb0
 8001cbc:	20000cb4 	.word	0x20000cb4
 8001cc0:	20000d8c 	.word	0x20000d8c
 8001cc4:	20000d88 	.word	0x20000d88
 8001cc8:	20000cac 	.word	0x20000cac
 8001ccc:	20000cb8 	.word	0x20000cb8
 8001cd0:	20000d4c 	.word	0x20000d4c
 8001cd4:	20000dd4 	.word	0x20000dd4
 8001cd8:	20000d58 	.word	0x20000d58

08001cdc <xTaskResumeAll>:
{
 8001cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001ce0:	4c31      	ldr	r4, [pc, #196]	; (8001da8 <xTaskResumeAll+0xcc>)
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	b943      	cbnz	r3, 8001cf8 <xTaskResumeAll+0x1c>
 8001ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cea:	f383 8811 	msr	BASEPRI, r3
 8001cee:	f3bf 8f6f 	isb	sy
 8001cf2:	f3bf 8f4f 	dsb	sy
 8001cf6:	e7fe      	b.n	8001cf6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001cf8:	f7ff fc3c 	bl	8001574 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d02:	6824      	ldr	r4, [r4, #0]
 8001d04:	b12c      	cbz	r4, 8001d12 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001d06:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001d08:	f7ff fc56 	bl	80015b8 <vPortExitCritical>
}
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <xTaskResumeAll+0xd0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f5      	beq.n	8001d06 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d1a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001dc4 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001d1e:	4f24      	ldr	r7, [pc, #144]	; (8001db0 <xTaskResumeAll+0xd4>)
 8001d20:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001dc8 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d24:	f8d9 3000 	ldr.w	r3, [r9]
 8001d28:	b9e3      	cbnz	r3, 8001d64 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001d2a:	b10c      	cbz	r4, 8001d30 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001d2c:	f7ff fdd8 	bl	80018e0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001d30:	4d20      	ldr	r5, [pc, #128]	; (8001db4 <xTaskResumeAll+0xd8>)
 8001d32:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001d34:	b144      	cbz	r4, 8001d48 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001d36:	2701      	movs	r7, #1
 8001d38:	4e1f      	ldr	r6, [pc, #124]	; (8001db8 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8001d3a:	f7ff ff3d 	bl	8001bb8 <xTaskIncrementTick>
 8001d3e:	b100      	cbz	r0, 8001d42 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001d40:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001d42:	3c01      	subs	r4, #1
 8001d44:	d1f9      	bne.n	8001d3a <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001d46:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <xTaskResumeAll+0xdc>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0da      	beq.n	8001d06 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <xTaskResumeAll+0xe0>)
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	f3bf 8f4f 	dsb	sy
 8001d5c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001d60:	2401      	movs	r4, #1
 8001d62:	e7d1      	b.n	8001d08 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001d64:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8001d68:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001d6a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d6c:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d6e:	f104 0018 	add.w	r0, r4, #24
 8001d72:	f7ff fba3 	bl	80014bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d76:	4630      	mov	r0, r6
 8001d78:	f7ff fba0 	bl	80014bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d7c:	2014      	movs	r0, #20
 8001d7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	fa05 f302 	lsl.w	r3, r5, r2
 8001d86:	430b      	orrs	r3, r1
 8001d88:	fb00 8002 	mla	r0, r0, r2, r8
 8001d8c:	4631      	mov	r1, r6
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	f7ff fb71 	bl	8001476 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <xTaskResumeAll+0xe4>)
 8001d96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001d9e:	bf24      	itt	cs
 8001da0:	4b05      	ldrcs	r3, [pc, #20]	; (8001db8 <xTaskResumeAll+0xdc>)
 8001da2:	601d      	strcs	r5, [r3, #0]
 8001da4:	e7be      	b.n	8001d24 <xTaskResumeAll+0x48>
 8001da6:	bf00      	nop
 8001da8:	20000d50 	.word	0x20000d50
 8001dac:	20000d44 	.word	0x20000d44
 8001db0:	20000d58 	.word	0x20000d58
 8001db4:	20000d4c 	.word	0x20000d4c
 8001db8:	20000dd4 	.word	0x20000dd4
 8001dbc:	e000ed04 	.word	0xe000ed04
 8001dc0:	20000cac 	.word	0x20000cac
 8001dc4:	20000d90 	.word	0x20000d90
 8001dc8:	20000cb8 	.word	0x20000cb8

08001dcc <vTaskDelay>:
	{
 8001dcc:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001dce:	b940      	cbnz	r0, 8001de2 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <vTaskDelay+0x40>)
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	f3bf 8f4f 	dsb	sy
 8001ddc:	f3bf 8f6f 	isb	sy
 8001de0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <vTaskDelay+0x44>)
 8001de4:	6819      	ldr	r1, [r3, #0]
 8001de6:	b141      	cbz	r1, 8001dfa <vTaskDelay+0x2e>
 8001de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dec:	f383 8811 	msr	BASEPRI, r3
 8001df0:	f3bf 8f6f 	isb	sy
 8001df4:	f3bf 8f4f 	dsb	sy
 8001df8:	e7fe      	b.n	8001df8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001dfa:	f7ff fed5 	bl	8001ba8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001dfe:	f7ff fd81 	bl	8001904 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001e02:	f7ff ff6b 	bl	8001cdc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001e06:	2800      	cmp	r0, #0
 8001e08:	d0e2      	beq.n	8001dd0 <vTaskDelay+0x4>
 8001e0a:	bd08      	pop	{r3, pc}
 8001e0c:	e000ed04 	.word	0xe000ed04
 8001e10:	20000d50 	.word	0x20000d50

08001e14 <prvIdleTask>:
{
 8001e14:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001e16:	4e17      	ldr	r6, [pc, #92]	; (8001e74 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e18:	4c17      	ldr	r4, [pc, #92]	; (8001e78 <prvIdleTask+0x64>)
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	b963      	cbnz	r3, 8001e38 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <prvIdleTask+0x68>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d9f8      	bls.n	8001e18 <prvIdleTask+0x4>
				taskYIELD();
 8001e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <prvIdleTask+0x6c>)
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f3bf 8f4f 	dsb	sy
 8001e32:	f3bf 8f6f 	isb	sy
 8001e36:	e7ef      	b.n	8001e18 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8001e38:	f7ff feb6 	bl	8001ba8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001e3c:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8001e3e:	f7ff ff4d 	bl	8001cdc <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8001e42:	2d00      	cmp	r5, #0
 8001e44:	d0e9      	beq.n	8001e1a <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8001e46:	f7ff fb95 	bl	8001574 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001e4a:	68f3      	ldr	r3, [r6, #12]
 8001e4c:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e4e:	1d28      	adds	r0, r5, #4
 8001e50:	f7ff fb34 	bl	80014bc <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001e54:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <prvIdleTask+0x70>)
 8001e56:	6813      	ldr	r3, [r2, #0]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8001e62:	f7ff fba9 	bl	80015b8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8001e66:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001e68:	f7ff fd02 	bl	8001870 <vPortFree>
			vPortFree( pxTCB );
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	f7ff fcff 	bl	8001870 <vPortFree>
 8001e72:	e7d2      	b.n	8001e1a <prvIdleTask+0x6>
 8001e74:	20000dbc 	.word	0x20000dbc
 8001e78:	20000d48 	.word	0x20000d48
 8001e7c:	20000cb8 	.word	0x20000cb8
 8001e80:	e000ed04 	.word	0xe000ed04
 8001e84:	20000d44 	.word	0x20000d44

08001e88 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <vTaskSwitchContext+0x60>)
{
 8001e8a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <vTaskSwitchContext+0x64>)
 8001e90:	b112      	cbz	r2, 8001e98 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001e92:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001e98:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <vTaskSwitchContext+0x68>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	2214      	movs	r2, #20
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f1c3 031f 	rsb	r3, r3, #31
 8001eaa:	435a      	muls	r2, r3
 8001eac:	4911      	ldr	r1, [pc, #68]	; (8001ef4 <vTaskSwitchContext+0x6c>)
 8001eae:	588c      	ldr	r4, [r1, r2]
 8001eb0:	1888      	adds	r0, r1, r2
 8001eb2:	b944      	cbnz	r4, 8001ec6 <vTaskSwitchContext+0x3e>
	__asm volatile
 8001eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb8:	f383 8811 	msr	BASEPRI, r3
 8001ebc:	f3bf 8f6f 	isb	sy
 8001ec0:	f3bf 8f4f 	dsb	sy
 8001ec4:	e7fe      	b.n	8001ec4 <vTaskSwitchContext+0x3c>
 8001ec6:	6844      	ldr	r4, [r0, #4]
 8001ec8:	3208      	adds	r2, #8
 8001eca:	6864      	ldr	r4, [r4, #4]
 8001ecc:	440a      	add	r2, r1
 8001ece:	4294      	cmp	r4, r2
 8001ed0:	bf08      	it	eq
 8001ed2:	6862      	ldreq	r2, [r4, #4]
 8001ed4:	6044      	str	r4, [r0, #4]
 8001ed6:	bf08      	it	eq
 8001ed8:	6042      	streq	r2, [r0, #4]
 8001eda:	2214      	movs	r2, #20
 8001edc:	fb02 1303 	mla	r3, r2, r3, r1
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <vTaskSwitchContext+0x70>)
 8001ee6:	e7d5      	b.n	8001e94 <vTaskSwitchContext+0xc>
 8001ee8:	20000d50 	.word	0x20000d50
 8001eec:	20000dd4 	.word	0x20000dd4
 8001ef0:	20000d58 	.word	0x20000d58
 8001ef4:	20000cb8 	.word	0x20000cb8
 8001ef8:	20000cac 	.word	0x20000cac

08001efc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <xTaskGetSchedulerState+0x18>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	b133      	cbz	r3, 8001f10 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <xTaskGetSchedulerState+0x1c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8001f08:	bf0c      	ite	eq
 8001f0a:	2002      	moveq	r0, #2
 8001f0c:	2000      	movne	r0, #0
 8001f0e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001f10:	2001      	movs	r0, #1
	}
 8001f12:	4770      	bx	lr
 8001f14:	20000da4 	.word	0x20000da4
 8001f18:	20000d50 	.word	0x20000d50

08001f1c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001f1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	vTaskDelay(mxDelay);
 8001f1e:	4c02      	ldr	r4, [pc, #8]	; (8001f28 <StartTask02+0xc>)
 8001f20:	6820      	ldr	r0, [r4, #0]
 8001f22:	f7ff ff53 	bl	8001dcc <vTaskDelay>
 8001f26:	e7fb      	b.n	8001f20 <StartTask02+0x4>
 8001f28:	20000004 	.word	0x20000004

08001f2c <StartDefaultTask>:
 8001f2c:	b508      	push	{r3, lr}
 8001f2e:	f7ff fff5 	bl	8001f1c <StartTask02>
	...

08001f34 <Slog>:
{
 8001f34:	b40f      	push	{r0, r1, r2, r3}
 8001f36:	b500      	push	{lr}
 8001f38:	b0b5      	sub	sp, #212	; 0xd4
 8001f3a:	aa36      	add	r2, sp, #216	; 0xd8
 8001f3c:	f852 1b04 	ldr.w	r1, [r2], #4
    if(0 < vsprintf(string,fmt,args)) {
 8001f40:	a802      	add	r0, sp, #8
    va_start(args, fmt);
 8001f42:	9201      	str	r2, [sp, #4]
    if(0 < vsprintf(string,fmt,args)) {
 8001f44:	f000 fa84 	bl	8002450 <vsiprintf>
 8001f48:	2800      	cmp	r0, #0
    	HAL_UART_Transmit(&huart4, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 8001f4a:	a802      	add	r0, sp, #8
    if(0 < vsprintf(string,fmt,args)) {
 8001f4c:	dd0d      	ble.n	8001f6a <Slog+0x36>
    	HAL_UART_Transmit(&huart4, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 8001f4e:	f7fe f917 	bl	8000180 <strlen>
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f56:	b282      	uxth	r2, r0
 8001f58:	a902      	add	r1, sp, #8
    	HAL_UART_Transmit(&huart4, (uint8_t*)"failed to build string", strlen(string), HAL_MAX_DELAY);
 8001f5a:	4807      	ldr	r0, [pc, #28]	; (8001f78 <Slog+0x44>)
 8001f5c:	f7ff f9fa 	bl	8001354 <HAL_UART_Transmit>
}
 8001f60:	b035      	add	sp, #212	; 0xd4
 8001f62:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f66:	b004      	add	sp, #16
 8001f68:	4770      	bx	lr
    	HAL_UART_Transmit(&huart4, (uint8_t*)"failed to build string", strlen(string), HAL_MAX_DELAY);
 8001f6a:	f7fe f909 	bl	8000180 <strlen>
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f72:	b282      	uxth	r2, r0
 8001f74:	4901      	ldr	r1, [pc, #4]	; (8001f7c <Slog+0x48>)
 8001f76:	e7f0      	b.n	8001f5a <Slog+0x26>
 8001f78:	20000df0 	.word	0x20000df0
 8001f7c:	08002cd4 	.word	0x08002cd4

08001f80 <Led_Gatekeeper>:
	int iLoop=0;
 8001f80:	2100      	movs	r1, #0
void Led_Gatekeeper(void * pvParamerters) {
 8001f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		Slog("Led on for loop : %d \n",iLoop++);
 8001f84:	4f0c      	ldr	r7, [pc, #48]	; (8001fb8 <Led_Gatekeeper+0x38>)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,GPIO_PIN_RESET);
 8001f86:	4d0d      	ldr	r5, [pc, #52]	; (8001fbc <Led_Gatekeeper+0x3c>)
		Slog("Led on for loop : %d \n",iLoop++);
 8001f88:	4638      	mov	r0, r7
		vTaskDelay(mxDelay);
 8001f8a:	4c0d      	ldr	r4, [pc, #52]	; (8001fc0 <Led_Gatekeeper+0x40>)
		Slog("Led on for loop : %d \n",iLoop++);
 8001f8c:	1c4e      	adds	r6, r1, #1
 8001f8e:	f7ff ffd1 	bl	8001f34 <Slog>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,GPIO_PIN_RESET);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2102      	movs	r1, #2
 8001f96:	4628      	mov	r0, r5
 8001f98:	f7fe fa5a 	bl	8000450 <HAL_GPIO_WritePin>
		vTaskDelay(mxDelay);
 8001f9c:	6820      	ldr	r0, [r4, #0]
 8001f9e:	f7ff ff15 	bl	8001dcc <vTaskDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1,GPIO_PIN_SET);
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4628      	mov	r0, r5
 8001fa8:	f7fe fa52 	bl	8000450 <HAL_GPIO_WritePin>
		vTaskDelay(mxDelay);
 8001fac:	6820      	ldr	r0, [r4, #0]
 8001fae:	f7ff ff0d 	bl	8001dcc <vTaskDelay>
		Slog("Led on for loop : %d \n",iLoop++);
 8001fb2:	4631      	mov	r1, r6
 8001fb4:	e7e8      	b.n	8001f88 <Led_Gatekeeper+0x8>
 8001fb6:	bf00      	nop
 8001fb8:	08002cbd 	.word	0x08002cbd
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	20000004 	.word	0x20000004

08001fc4 <SystemClock_Config>:
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fc4:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <SystemClock_Config+0x7c>)
{
 8001fc6:	b530      	push	{r4, r5, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fc8:	6813      	ldr	r3, [r2, #0]
{
 8001fca:	b093      	sub	sp, #76	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fcc:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001fd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fd4:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fda:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001fe0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fe4:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001fe6:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001fe8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001fea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fee:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff0:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001ff2:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001ff4:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff6:	f7fe fa71 	bl	80004dc <HAL_RCC_OscConfig>
 8001ffa:	b100      	cbz	r0, 8001ffe <SystemClock_Config+0x3a>
 8001ffc:	e7fe      	b.n	8001ffc <SystemClock_Config+0x38>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ffe:	2303      	movs	r3, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002000:	240f      	movs	r4, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002002:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002004:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002006:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002008:	4629      	mov	r1, r5
 800200a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800200c:	9400      	str	r4, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800200e:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002010:	f7fe fdfe 	bl	8000c10 <HAL_RCC_ClockConfig>
 8002014:	4605      	mov	r5, r0
 8002016:	b100      	cbz	r0, 800201a <SystemClock_Config+0x56>
 8002018:	e7fe      	b.n	8002018 <SystemClock_Config+0x54>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800201a:	f7fe fed7 	bl	8000dcc <HAL_RCC_GetHCLKFreq>
 800201e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002022:	fbb0 f0f3 	udiv	r0, r0, r3
 8002026:	f7fe f91f 	bl	8000268 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800202a:	2004      	movs	r0, #4
 800202c:	f7fe f932 	bl	8000294 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002030:	462a      	mov	r2, r5
 8002032:	4621      	mov	r1, r4
 8002034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002038:	f7fe f8d6 	bl	80001e8 <HAL_NVIC_SetPriority>
}
 800203c:	b013      	add	sp, #76	; 0x4c
 800203e:	bd30      	pop	{r4, r5, pc}
 8002040:	40007000 	.word	0x40007000

08002044 <main>:
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b090      	sub	sp, #64	; 0x40
  HAL_Init();
 8002048:	f7fe f8a2 	bl	8000190 <HAL_Init>
  SystemClock_Config();
 800204c:	f7ff ffba 	bl	8001fc4 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002050:	4b46      	ldr	r3, [pc, #280]	; (800216c <main+0x128>)
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002052:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002054:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002056:	4846      	ldr	r0, [pc, #280]	; (8002170 <main+0x12c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002058:	f042 0204 	orr.w	r2, r2, #4
 800205c:	61da      	str	r2, [r3, #28]
 800205e:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002062:	f002 0204 	and.w	r2, r2, #4
 8002066:	9202      	str	r2, [sp, #8]
 8002068:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800206a:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206c:	2701      	movs	r7, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800206e:	f042 0220 	orr.w	r2, r2, #32
 8002072:	61da      	str	r2, [r3, #28]
 8002074:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002076:	260c      	movs	r6, #12
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002078:	f002 0220 	and.w	r2, r2, #32
 800207c:	9203      	str	r2, [sp, #12]
 800207e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002080:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2502      	movs	r5, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	61da      	str	r2, [r3, #28]
 800208a:	69da      	ldr	r2, [r3, #28]
 800208c:	f002 0201 	and.w	r2, r2, #1
 8002090:	9204      	str	r2, [sp, #16]
 8002092:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002094:	69da      	ldr	r2, [r3, #28]
 8002096:	f042 0202 	orr.w	r2, r2, #2
 800209a:	61da      	str	r2, [r3, #28]
 800209c:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800209e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	9305      	str	r3, [sp, #20]
 80020a6:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020a8:	f7fe f9d2 	bl	8000450 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2122      	movs	r1, #34	; 0x22
 80020b0:	482f      	ldr	r0, [pc, #188]	; (8002170 <main+0x12c>)
 80020b2:	f7fe f9cd 	bl	8000450 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80020b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ba:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020bc:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <main+0x130>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020be:	a90b      	add	r1, sp, #44	; 0x2c
 80020c0:	482d      	ldr	r0, [pc, #180]	; (8002178 <main+0x134>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020c2:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020c6:	f7fe f8f1 	bl	80002ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 80020ca:	2322      	movs	r3, #34	; 0x22
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	a90b      	add	r1, sp, #44	; 0x2c
 80020ce:	4828      	ldr	r0, [pc, #160]	; (8002170 <main+0x12c>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 80020d0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d2:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d8:	f7fe f8e8 	bl	80002ac <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020e0:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	a90b      	add	r1, sp, #44	; 0x2c
 80020e4:	4822      	ldr	r0, [pc, #136]	; (8002170 <main+0x12c>)
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020e6:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020e8:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ee:	f7fe f8dd 	bl	80002ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 80020f2:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020f4:	a90b      	add	r1, sp, #44	; 0x2c
 80020f6:	481e      	ldr	r0, [pc, #120]	; (8002170 <main+0x12c>)
  GPIO_InitStruct.Pin = LD2_Pin;
 80020f8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fa:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002100:	f7fe f8d4 	bl	80002ac <HAL_GPIO_Init>
  huart4.Init.BaudRate = 115200;
 8002104:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart4.Instance = UART4;
 8002108:	481c      	ldr	r0, [pc, #112]	; (800217c <main+0x138>)
  huart4.Init.BaudRate = 115200;
 800210a:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <main+0x13c>)
  huart4.Init.Mode = UART_MODE_TX_RX;
 800210c:	6146      	str	r6, [r0, #20]
  huart4.Init.BaudRate = 115200;
 800210e:	e880 000c 	stmia.w	r0, {r2, r3}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002112:	6084      	str	r4, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002114:	60c4      	str	r4, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002116:	6104      	str	r4, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002118:	6184      	str	r4, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800211a:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800211c:	f7ff f8ee 	bl	80012fc <HAL_UART_Init>
 8002120:	4606      	mov	r6, r0
 8002122:	b100      	cbz	r0, 8002126 <main+0xe2>
 8002124:	e7fe      	b.n	8002124 <main+0xe0>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002126:	4c17      	ldr	r4, [pc, #92]	; (8002184 <main+0x140>)
  xTaskCreate(Led_Gatekeeper,
 8002128:	4603      	mov	r3, r0
 800212a:	e88d 0060 	stmia.w	sp, {r5, r6}
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	4915      	ldr	r1, [pc, #84]	; (8002188 <main+0x144>)
 8002132:	4816      	ldr	r0, [pc, #88]	; (800218c <main+0x148>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002134:	ad06      	add	r5, sp, #24
  xTaskCreate(Led_Gatekeeper,
 8002136:	f7ff fc2b 	bl	8001990 <xTaskCreate>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800213a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800213c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800213e:	f854 3b04 	ldr.w	r3, [r4], #4
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002142:	4631      	mov	r1, r6
 8002144:	a806      	add	r0, sp, #24
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002146:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002148:	f7ff f964 	bl	8001414 <osThreadCreate>
 800214c:	4b10      	ldr	r3, [pc, #64]	; (8002190 <main+0x14c>)
  osThreadDef(send_data, StartTask02, osPriorityNormal, 0, 128);
 800214e:	ad0b      	add	r5, sp, #44	; 0x2c
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002150:	6018      	str	r0, [r3, #0]
  osThreadDef(send_data, StartTask02, osPriorityNormal, 0, 128);
 8002152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002156:	6823      	ldr	r3, [r4, #0]
  send_dataHandle = osThreadCreate(osThread(send_data), NULL);
 8002158:	4631      	mov	r1, r6
 800215a:	a80b      	add	r0, sp, #44	; 0x2c
  osThreadDef(send_data, StartTask02, osPriorityNormal, 0, 128);
 800215c:	602b      	str	r3, [r5, #0]
  send_dataHandle = osThreadCreate(osThread(send_data), NULL);
 800215e:	f7ff f959 	bl	8001414 <osThreadCreate>
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <main+0x150>)
 8002164:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002166:	f7ff f950 	bl	800140a <osKernelStart>
 800216a:	e7fe      	b.n	800216a <main+0x126>
 800216c:	40023800 	.word	0x40023800
 8002170:	40020000 	.word	0x40020000
 8002174:	10110000 	.word	0x10110000
 8002178:	40020800 	.word	0x40020800
 800217c:	20000df0 	.word	0x20000df0
 8002180:	40004c00 	.word	0x40004c00
 8002184:	08002c90 	.word	0x08002c90
 8002188:	08002ceb 	.word	0x08002ceb
 800218c:	08001f81 	.word	0x08001f81
 8002190:	20000de8 	.word	0x20000de8
 8002194:	20000dec 	.word	0x20000dec

08002198 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002198:	6802      	ldr	r2, [r0, #0]
 800219a:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800219c:	429a      	cmp	r2, r3
 800219e:	d101      	bne.n	80021a4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80021a0:	f7fe b802 	b.w	80001a8 <HAL_IncTick>
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40001000 	.word	0x40001000

080021ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80021ae:	4b26      	ldr	r3, [pc, #152]	; (8002248 <HAL_MspInit+0x9c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b0:	2003      	movs	r0, #3
  __HAL_RCC_COMP_CLK_ENABLE();
 80021b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24
 80021ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021bc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80021c0:	9201      	str	r2, [sp, #4]
 80021c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c4:	6a1a      	ldr	r2, [r3, #32]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	621a      	str	r2, [r3, #32]
 80021cc:	6a1a      	ldr	r2, [r3, #32]
 80021ce:	f002 0201 	and.w	r2, r2, #1
 80021d2:	9202      	str	r2, [sp, #8]
 80021d4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e4:	9303      	str	r3, [sp, #12]
 80021e6:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e8:	f7fd ffec 	bl	80001c4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80021ec:	2200      	movs	r2, #0
 80021ee:	f06f 000b 	mvn.w	r0, #11
 80021f2:	4611      	mov	r1, r2
 80021f4:	f7fd fff8 	bl	80001e8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80021f8:	2200      	movs	r2, #0
 80021fa:	f06f 000a 	mvn.w	r0, #10
 80021fe:	4611      	mov	r1, r2
 8002200:	f7fd fff2 	bl	80001e8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	f06f 0009 	mvn.w	r0, #9
 800220a:	4611      	mov	r1, r2
 800220c:	f7fd ffec 	bl	80001e8 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002210:	2200      	movs	r2, #0
 8002212:	f06f 0004 	mvn.w	r0, #4
 8002216:	4611      	mov	r1, r2
 8002218:	f7fd ffe6 	bl	80001e8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	f06f 0003 	mvn.w	r0, #3
 8002222:	4611      	mov	r1, r2
 8002224:	f7fd ffe0 	bl	80001e8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	210f      	movs	r1, #15
 800222c:	f06f 0001 	mvn.w	r0, #1
 8002230:	f7fd ffda 	bl	80001e8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	210f      	movs	r1, #15
 8002238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800223c:	f7fd ffd4 	bl	80001e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002240:	b005      	add	sp, #20
 8002242:	f85d fb04 	ldr.w	pc, [sp], #4
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800

0800224c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800224c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 800224e:	6802      	ldr	r2, [r0, #0]
 8002250:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <HAL_UART_MspInit+0x44>)
 8002252:	429a      	cmp	r2, r3
 8002254:	d119      	bne.n	800228a <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002256:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800225a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225c:	a901      	add	r1, sp, #4
    __HAL_RCC_UART4_CLK_ENABLE();
 800225e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002262:	625a      	str	r2, [r3, #36]	; 0x24
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002266:	480b      	ldr	r0, [pc, #44]	; (8002294 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8002268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002270:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002274:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800227a:	2301      	movs	r3, #1
 800227c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002282:	2308      	movs	r3, #8
 8002284:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002286:	f7fe f811 	bl	80002ac <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800228a:	b007      	add	sp, #28
 800228c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002290:	40004c00 	.word	0x40004c00
 8002294:	40020800 	.word	0x40020800

08002298 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002298:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 800229a:	4601      	mov	r1, r0
{
 800229c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0); 
 800229e:	2200      	movs	r2, #0
 80022a0:	202b      	movs	r0, #43	; 0x2b
 80022a2:	f7fd ffa1 	bl	80001e8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn); 
 80022a6:	202b      	movs	r0, #43	; 0x2b
 80022a8:	f7fd ffd2 	bl	8000250 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022ae:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022b2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022b4:	f042 0210 	orr.w	r2, r2, #16
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80022bc:	4c11      	ldr	r4, [pc, #68]	; (8002304 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	9302      	str	r3, [sp, #8]
 80022c4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022c6:	f7fe fdb7 	bl	8000e38 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022ca:	f7fe fd85 	bl	8000dd8 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_InitTick+0x70>)
 80022d0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80022d2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80022d6:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <HAL_InitTick+0x74>)
 80022da:	fbb0 f0f3 	udiv	r0, r0, r3
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 80022de:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80022e0:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 80022e2:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80022e4:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80022e6:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e8:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80022ea:	f7fe fe06 	bl	8000efa <HAL_TIM_Base_Init>
 80022ee:	b920      	cbnz	r0, 80022fa <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80022f0:	4620      	mov	r0, r4
 80022f2:	f7fe fe1c 	bl	8000f2e <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80022f6:	b008      	add	sp, #32
 80022f8:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80022fa:	2001      	movs	r0, #1
 80022fc:	e7fb      	b.n	80022f6 <HAL_InitTick+0x5e>
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	20000e30 	.word	0x20000e30
 8002308:	40001000 	.word	0x40001000
 800230c:	000f4240 	.word	0x000f4240

08002310 <NMI_Handler>:
 8002310:	4770      	bx	lr

08002312 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002312:	e7fe      	b.n	8002312 <HardFault_Handler>

08002314 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002314:	e7fe      	b.n	8002314 <MemManage_Handler>

08002316 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002316:	e7fe      	b.n	8002316 <BusFault_Handler>

08002318 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002318:	e7fe      	b.n	8002318 <UsageFault_Handler>

0800231a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800231a:	4770      	bx	lr

0800231c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800231c:	f7ff b893 	b.w	8001446 <osSystickHandler>

08002320 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002320:	4801      	ldr	r0, [pc, #4]	; (8002328 <TIM6_IRQHandler+0x8>)
 8002322:	f7fe be13 	b.w	8000f4c <HAL_TIM_IRQHandler>
 8002326:	bf00      	nop
 8002328:	20000e30 	.word	0x20000e30

0800232c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800232c:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <SystemInit+0x3c>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002334:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8002336:	6899      	ldr	r1, [r3, #8]
 8002338:	4a0c      	ldr	r2, [pc, #48]	; (800236c <SystemInit+0x40>)
 800233a:	400a      	ands	r2, r1
 800233c:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8002344:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8002348:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002350:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8002358:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800235a:	2200      	movs	r2, #0
 800235c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800235e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002362:	4b03      	ldr	r3, [pc, #12]	; (8002370 <SystemInit+0x44>)
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	4770      	bx	lr
 8002368:	40023800 	.word	0x40023800
 800236c:	88ffc00c 	.word	0x88ffc00c
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002374:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002376:	e003      	b.n	8002380 <LoopCopyDataInit>

08002378 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800237a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800237c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800237e:	3104      	adds	r1, #4

08002380 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002380:	480a      	ldr	r0, [pc, #40]	; (80023ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002384:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002386:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002388:	d3f6      	bcc.n	8002378 <CopyDataInit>
  ldr r2, =_sbss
 800238a:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800238c:	e002      	b.n	8002394 <LoopFillZerobss>

0800238e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002390:	f842 3b04 	str.w	r3, [r2], #4

08002394 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002396:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002398:	d3f9      	bcc.n	800238e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800239a:	f7ff ffc7 	bl	800232c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800239e:	f000 f80f 	bl	80023c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023a2:	f7ff fe4f 	bl	8002044 <main>
  bx lr
 80023a6:	4770      	bx	lr
  ldr r3, =_sidata
 80023a8:	08002d68 	.word	0x08002d68
  ldr r0, =_sdata
 80023ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80023b0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80023b4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80023b8:	20000e6c 	.word	0x20000e6c

080023bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <ADC1_IRQHandler>
	...

080023c0 <__libc_init_array>:
 80023c0:	b570      	push	{r4, r5, r6, lr}
 80023c2:	2500      	movs	r5, #0
 80023c4:	4e0c      	ldr	r6, [pc, #48]	; (80023f8 <__libc_init_array+0x38>)
 80023c6:	4c0d      	ldr	r4, [pc, #52]	; (80023fc <__libc_init_array+0x3c>)
 80023c8:	1ba4      	subs	r4, r4, r6
 80023ca:	10a4      	asrs	r4, r4, #2
 80023cc:	42a5      	cmp	r5, r4
 80023ce:	d109      	bne.n	80023e4 <__libc_init_array+0x24>
 80023d0:	f000 fc52 	bl	8002c78 <_init>
 80023d4:	2500      	movs	r5, #0
 80023d6:	4e0a      	ldr	r6, [pc, #40]	; (8002400 <__libc_init_array+0x40>)
 80023d8:	4c0a      	ldr	r4, [pc, #40]	; (8002404 <__libc_init_array+0x44>)
 80023da:	1ba4      	subs	r4, r4, r6
 80023dc:	10a4      	asrs	r4, r4, #2
 80023de:	42a5      	cmp	r5, r4
 80023e0:	d105      	bne.n	80023ee <__libc_init_array+0x2e>
 80023e2:	bd70      	pop	{r4, r5, r6, pc}
 80023e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023e8:	4798      	blx	r3
 80023ea:	3501      	adds	r5, #1
 80023ec:	e7ee      	b.n	80023cc <__libc_init_array+0xc>
 80023ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023f2:	4798      	blx	r3
 80023f4:	3501      	adds	r5, #1
 80023f6:	e7f2      	b.n	80023de <__libc_init_array+0x1e>
 80023f8:	08002d60 	.word	0x08002d60
 80023fc:	08002d60 	.word	0x08002d60
 8002400:	08002d60 	.word	0x08002d60
 8002404:	08002d64 	.word	0x08002d64

08002408 <memcpy>:
 8002408:	b510      	push	{r4, lr}
 800240a:	1e43      	subs	r3, r0, #1
 800240c:	440a      	add	r2, r1
 800240e:	4291      	cmp	r1, r2
 8002410:	d100      	bne.n	8002414 <memcpy+0xc>
 8002412:	bd10      	pop	{r4, pc}
 8002414:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800241c:	e7f7      	b.n	800240e <memcpy+0x6>

0800241e <_vsiprintf_r>:
 800241e:	b510      	push	{r4, lr}
 8002420:	b09a      	sub	sp, #104	; 0x68
 8002422:	9100      	str	r1, [sp, #0]
 8002424:	9104      	str	r1, [sp, #16]
 8002426:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800242a:	9102      	str	r1, [sp, #8]
 800242c:	9105      	str	r1, [sp, #20]
 800242e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002432:	f44f 7402 	mov.w	r4, #520	; 0x208
 8002436:	f8ad 100e 	strh.w	r1, [sp, #14]
 800243a:	4669      	mov	r1, sp
 800243c:	f8ad 400c 	strh.w	r4, [sp, #12]
 8002440:	f000 f86c 	bl	800251c <_svfiprintf_r>
 8002444:	2200      	movs	r2, #0
 8002446:	9b00      	ldr	r3, [sp, #0]
 8002448:	701a      	strb	r2, [r3, #0]
 800244a:	b01a      	add	sp, #104	; 0x68
 800244c:	bd10      	pop	{r4, pc}
	...

08002450 <vsiprintf>:
 8002450:	4613      	mov	r3, r2
 8002452:	460a      	mov	r2, r1
 8002454:	4601      	mov	r1, r0
 8002456:	4802      	ldr	r0, [pc, #8]	; (8002460 <vsiprintf+0x10>)
 8002458:	6800      	ldr	r0, [r0, #0]
 800245a:	f7ff bfe0 	b.w	800241e <_vsiprintf_r>
 800245e:	bf00      	nop
 8002460:	2000000c 	.word	0x2000000c

08002464 <__ssputs_r>:
 8002464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002468:	688e      	ldr	r6, [r1, #8]
 800246a:	4682      	mov	sl, r0
 800246c:	429e      	cmp	r6, r3
 800246e:	460c      	mov	r4, r1
 8002470:	4691      	mov	r9, r2
 8002472:	4698      	mov	r8, r3
 8002474:	d835      	bhi.n	80024e2 <__ssputs_r+0x7e>
 8002476:	898a      	ldrh	r2, [r1, #12]
 8002478:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800247c:	d031      	beq.n	80024e2 <__ssputs_r+0x7e>
 800247e:	2302      	movs	r3, #2
 8002480:	6825      	ldr	r5, [r4, #0]
 8002482:	6909      	ldr	r1, [r1, #16]
 8002484:	1a6f      	subs	r7, r5, r1
 8002486:	6965      	ldr	r5, [r4, #20]
 8002488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800248c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002490:	f108 0301 	add.w	r3, r8, #1
 8002494:	443b      	add	r3, r7
 8002496:	429d      	cmp	r5, r3
 8002498:	bf38      	it	cc
 800249a:	461d      	movcc	r5, r3
 800249c:	0553      	lsls	r3, r2, #21
 800249e:	d531      	bpl.n	8002504 <__ssputs_r+0xa0>
 80024a0:	4629      	mov	r1, r5
 80024a2:	f000 fb3b 	bl	8002b1c <_malloc_r>
 80024a6:	4606      	mov	r6, r0
 80024a8:	b950      	cbnz	r0, 80024c0 <__ssputs_r+0x5c>
 80024aa:	230c      	movs	r3, #12
 80024ac:	f8ca 3000 	str.w	r3, [sl]
 80024b0:	89a3      	ldrh	r3, [r4, #12]
 80024b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ba:	81a3      	strh	r3, [r4, #12]
 80024bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024c0:	463a      	mov	r2, r7
 80024c2:	6921      	ldr	r1, [r4, #16]
 80024c4:	f7ff ffa0 	bl	8002408 <memcpy>
 80024c8:	89a3      	ldrh	r3, [r4, #12]
 80024ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80024ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d2:	81a3      	strh	r3, [r4, #12]
 80024d4:	6126      	str	r6, [r4, #16]
 80024d6:	443e      	add	r6, r7
 80024d8:	6026      	str	r6, [r4, #0]
 80024da:	4646      	mov	r6, r8
 80024dc:	6165      	str	r5, [r4, #20]
 80024de:	1bed      	subs	r5, r5, r7
 80024e0:	60a5      	str	r5, [r4, #8]
 80024e2:	4546      	cmp	r6, r8
 80024e4:	bf28      	it	cs
 80024e6:	4646      	movcs	r6, r8
 80024e8:	4649      	mov	r1, r9
 80024ea:	4632      	mov	r2, r6
 80024ec:	6820      	ldr	r0, [r4, #0]
 80024ee:	f000 faaf 	bl	8002a50 <memmove>
 80024f2:	68a3      	ldr	r3, [r4, #8]
 80024f4:	2000      	movs	r0, #0
 80024f6:	1b9b      	subs	r3, r3, r6
 80024f8:	60a3      	str	r3, [r4, #8]
 80024fa:	6823      	ldr	r3, [r4, #0]
 80024fc:	441e      	add	r6, r3
 80024fe:	6026      	str	r6, [r4, #0]
 8002500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002504:	462a      	mov	r2, r5
 8002506:	f000 fb67 	bl	8002bd8 <_realloc_r>
 800250a:	4606      	mov	r6, r0
 800250c:	2800      	cmp	r0, #0
 800250e:	d1e1      	bne.n	80024d4 <__ssputs_r+0x70>
 8002510:	6921      	ldr	r1, [r4, #16]
 8002512:	4650      	mov	r0, sl
 8002514:	f000 fab6 	bl	8002a84 <_free_r>
 8002518:	e7c7      	b.n	80024aa <__ssputs_r+0x46>
	...

0800251c <_svfiprintf_r>:
 800251c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002520:	b09d      	sub	sp, #116	; 0x74
 8002522:	9303      	str	r3, [sp, #12]
 8002524:	898b      	ldrh	r3, [r1, #12]
 8002526:	4680      	mov	r8, r0
 8002528:	061c      	lsls	r4, r3, #24
 800252a:	460d      	mov	r5, r1
 800252c:	4616      	mov	r6, r2
 800252e:	d50f      	bpl.n	8002550 <_svfiprintf_r+0x34>
 8002530:	690b      	ldr	r3, [r1, #16]
 8002532:	b96b      	cbnz	r3, 8002550 <_svfiprintf_r+0x34>
 8002534:	2140      	movs	r1, #64	; 0x40
 8002536:	f000 faf1 	bl	8002b1c <_malloc_r>
 800253a:	6028      	str	r0, [r5, #0]
 800253c:	6128      	str	r0, [r5, #16]
 800253e:	b928      	cbnz	r0, 800254c <_svfiprintf_r+0x30>
 8002540:	230c      	movs	r3, #12
 8002542:	f8c8 3000 	str.w	r3, [r8]
 8002546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800254a:	e0c4      	b.n	80026d6 <_svfiprintf_r+0x1ba>
 800254c:	2340      	movs	r3, #64	; 0x40
 800254e:	616b      	str	r3, [r5, #20]
 8002550:	2300      	movs	r3, #0
 8002552:	9309      	str	r3, [sp, #36]	; 0x24
 8002554:	2320      	movs	r3, #32
 8002556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800255a:	2330      	movs	r3, #48	; 0x30
 800255c:	f04f 0b01 	mov.w	fp, #1
 8002560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002564:	4637      	mov	r7, r6
 8002566:	463c      	mov	r4, r7
 8002568:	f814 3b01 	ldrb.w	r3, [r4], #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d13c      	bne.n	80025ea <_svfiprintf_r+0xce>
 8002570:	ebb7 0a06 	subs.w	sl, r7, r6
 8002574:	d00b      	beq.n	800258e <_svfiprintf_r+0x72>
 8002576:	4653      	mov	r3, sl
 8002578:	4632      	mov	r2, r6
 800257a:	4629      	mov	r1, r5
 800257c:	4640      	mov	r0, r8
 800257e:	f7ff ff71 	bl	8002464 <__ssputs_r>
 8002582:	3001      	adds	r0, #1
 8002584:	f000 80a2 	beq.w	80026cc <_svfiprintf_r+0x1b0>
 8002588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800258a:	4453      	add	r3, sl
 800258c:	9309      	str	r3, [sp, #36]	; 0x24
 800258e:	783b      	ldrb	r3, [r7, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 809b 	beq.w	80026cc <_svfiprintf_r+0x1b0>
 8002596:	2300      	movs	r3, #0
 8002598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800259c:	9304      	str	r3, [sp, #16]
 800259e:	9307      	str	r3, [sp, #28]
 80025a0:	9205      	str	r2, [sp, #20]
 80025a2:	9306      	str	r3, [sp, #24]
 80025a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025a8:	931a      	str	r3, [sp, #104]	; 0x68
 80025aa:	2205      	movs	r2, #5
 80025ac:	7821      	ldrb	r1, [r4, #0]
 80025ae:	4850      	ldr	r0, [pc, #320]	; (80026f0 <_svfiprintf_r+0x1d4>)
 80025b0:	f000 fa40 	bl	8002a34 <memchr>
 80025b4:	1c67      	adds	r7, r4, #1
 80025b6:	9b04      	ldr	r3, [sp, #16]
 80025b8:	b9d8      	cbnz	r0, 80025f2 <_svfiprintf_r+0xd6>
 80025ba:	06d9      	lsls	r1, r3, #27
 80025bc:	bf44      	itt	mi
 80025be:	2220      	movmi	r2, #32
 80025c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80025c4:	071a      	lsls	r2, r3, #28
 80025c6:	bf44      	itt	mi
 80025c8:	222b      	movmi	r2, #43	; 0x2b
 80025ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80025ce:	7822      	ldrb	r2, [r4, #0]
 80025d0:	2a2a      	cmp	r2, #42	; 0x2a
 80025d2:	d016      	beq.n	8002602 <_svfiprintf_r+0xe6>
 80025d4:	2100      	movs	r1, #0
 80025d6:	200a      	movs	r0, #10
 80025d8:	9a07      	ldr	r2, [sp, #28]
 80025da:	4627      	mov	r7, r4
 80025dc:	783b      	ldrb	r3, [r7, #0]
 80025de:	3401      	adds	r4, #1
 80025e0:	3b30      	subs	r3, #48	; 0x30
 80025e2:	2b09      	cmp	r3, #9
 80025e4:	d950      	bls.n	8002688 <_svfiprintf_r+0x16c>
 80025e6:	b1c9      	cbz	r1, 800261c <_svfiprintf_r+0x100>
 80025e8:	e011      	b.n	800260e <_svfiprintf_r+0xf2>
 80025ea:	2b25      	cmp	r3, #37	; 0x25
 80025ec:	d0c0      	beq.n	8002570 <_svfiprintf_r+0x54>
 80025ee:	4627      	mov	r7, r4
 80025f0:	e7b9      	b.n	8002566 <_svfiprintf_r+0x4a>
 80025f2:	4a3f      	ldr	r2, [pc, #252]	; (80026f0 <_svfiprintf_r+0x1d4>)
 80025f4:	463c      	mov	r4, r7
 80025f6:	1a80      	subs	r0, r0, r2
 80025f8:	fa0b f000 	lsl.w	r0, fp, r0
 80025fc:	4318      	orrs	r0, r3
 80025fe:	9004      	str	r0, [sp, #16]
 8002600:	e7d3      	b.n	80025aa <_svfiprintf_r+0x8e>
 8002602:	9a03      	ldr	r2, [sp, #12]
 8002604:	1d11      	adds	r1, r2, #4
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	9103      	str	r1, [sp, #12]
 800260a:	2a00      	cmp	r2, #0
 800260c:	db01      	blt.n	8002612 <_svfiprintf_r+0xf6>
 800260e:	9207      	str	r2, [sp, #28]
 8002610:	e004      	b.n	800261c <_svfiprintf_r+0x100>
 8002612:	4252      	negs	r2, r2
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	9207      	str	r2, [sp, #28]
 800261a:	9304      	str	r3, [sp, #16]
 800261c:	783b      	ldrb	r3, [r7, #0]
 800261e:	2b2e      	cmp	r3, #46	; 0x2e
 8002620:	d10d      	bne.n	800263e <_svfiprintf_r+0x122>
 8002622:	787b      	ldrb	r3, [r7, #1]
 8002624:	1c79      	adds	r1, r7, #1
 8002626:	2b2a      	cmp	r3, #42	; 0x2a
 8002628:	d132      	bne.n	8002690 <_svfiprintf_r+0x174>
 800262a:	9b03      	ldr	r3, [sp, #12]
 800262c:	3702      	adds	r7, #2
 800262e:	1d1a      	adds	r2, r3, #4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	9203      	str	r2, [sp, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	bfb8      	it	lt
 8002638:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800263c:	9305      	str	r3, [sp, #20]
 800263e:	4c2d      	ldr	r4, [pc, #180]	; (80026f4 <_svfiprintf_r+0x1d8>)
 8002640:	2203      	movs	r2, #3
 8002642:	7839      	ldrb	r1, [r7, #0]
 8002644:	4620      	mov	r0, r4
 8002646:	f000 f9f5 	bl	8002a34 <memchr>
 800264a:	b138      	cbz	r0, 800265c <_svfiprintf_r+0x140>
 800264c:	2340      	movs	r3, #64	; 0x40
 800264e:	1b00      	subs	r0, r0, r4
 8002650:	fa03 f000 	lsl.w	r0, r3, r0
 8002654:	9b04      	ldr	r3, [sp, #16]
 8002656:	3701      	adds	r7, #1
 8002658:	4303      	orrs	r3, r0
 800265a:	9304      	str	r3, [sp, #16]
 800265c:	7839      	ldrb	r1, [r7, #0]
 800265e:	2206      	movs	r2, #6
 8002660:	4825      	ldr	r0, [pc, #148]	; (80026f8 <_svfiprintf_r+0x1dc>)
 8002662:	1c7e      	adds	r6, r7, #1
 8002664:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002668:	f000 f9e4 	bl	8002a34 <memchr>
 800266c:	2800      	cmp	r0, #0
 800266e:	d035      	beq.n	80026dc <_svfiprintf_r+0x1c0>
 8002670:	4b22      	ldr	r3, [pc, #136]	; (80026fc <_svfiprintf_r+0x1e0>)
 8002672:	b9fb      	cbnz	r3, 80026b4 <_svfiprintf_r+0x198>
 8002674:	9b03      	ldr	r3, [sp, #12]
 8002676:	3307      	adds	r3, #7
 8002678:	f023 0307 	bic.w	r3, r3, #7
 800267c:	3308      	adds	r3, #8
 800267e:	9303      	str	r3, [sp, #12]
 8002680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002682:	444b      	add	r3, r9
 8002684:	9309      	str	r3, [sp, #36]	; 0x24
 8002686:	e76d      	b.n	8002564 <_svfiprintf_r+0x48>
 8002688:	fb00 3202 	mla	r2, r0, r2, r3
 800268c:	2101      	movs	r1, #1
 800268e:	e7a4      	b.n	80025da <_svfiprintf_r+0xbe>
 8002690:	2300      	movs	r3, #0
 8002692:	240a      	movs	r4, #10
 8002694:	4618      	mov	r0, r3
 8002696:	9305      	str	r3, [sp, #20]
 8002698:	460f      	mov	r7, r1
 800269a:	783a      	ldrb	r2, [r7, #0]
 800269c:	3101      	adds	r1, #1
 800269e:	3a30      	subs	r2, #48	; 0x30
 80026a0:	2a09      	cmp	r2, #9
 80026a2:	d903      	bls.n	80026ac <_svfiprintf_r+0x190>
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ca      	beq.n	800263e <_svfiprintf_r+0x122>
 80026a8:	9005      	str	r0, [sp, #20]
 80026aa:	e7c8      	b.n	800263e <_svfiprintf_r+0x122>
 80026ac:	fb04 2000 	mla	r0, r4, r0, r2
 80026b0:	2301      	movs	r3, #1
 80026b2:	e7f1      	b.n	8002698 <_svfiprintf_r+0x17c>
 80026b4:	ab03      	add	r3, sp, #12
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	462a      	mov	r2, r5
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <_svfiprintf_r+0x1e4>)
 80026bc:	a904      	add	r1, sp, #16
 80026be:	4640      	mov	r0, r8
 80026c0:	f3af 8000 	nop.w
 80026c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80026c8:	4681      	mov	r9, r0
 80026ca:	d1d9      	bne.n	8002680 <_svfiprintf_r+0x164>
 80026cc:	89ab      	ldrh	r3, [r5, #12]
 80026ce:	065b      	lsls	r3, r3, #25
 80026d0:	f53f af39 	bmi.w	8002546 <_svfiprintf_r+0x2a>
 80026d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026d6:	b01d      	add	sp, #116	; 0x74
 80026d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026dc:	ab03      	add	r3, sp, #12
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	462a      	mov	r2, r5
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <_svfiprintf_r+0x1e4>)
 80026e4:	a904      	add	r1, sp, #16
 80026e6:	4640      	mov	r0, r8
 80026e8:	f000 f884 	bl	80027f4 <_printf_i>
 80026ec:	e7ea      	b.n	80026c4 <_svfiprintf_r+0x1a8>
 80026ee:	bf00      	nop
 80026f0:	08002d2b 	.word	0x08002d2b
 80026f4:	08002d31 	.word	0x08002d31
 80026f8:	08002d35 	.word	0x08002d35
 80026fc:	00000000 	.word	0x00000000
 8002700:	08002465 	.word	0x08002465

08002704 <_printf_common>:
 8002704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002708:	4691      	mov	r9, r2
 800270a:	461f      	mov	r7, r3
 800270c:	688a      	ldr	r2, [r1, #8]
 800270e:	690b      	ldr	r3, [r1, #16]
 8002710:	4606      	mov	r6, r0
 8002712:	4293      	cmp	r3, r2
 8002714:	bfb8      	it	lt
 8002716:	4613      	movlt	r3, r2
 8002718:	f8c9 3000 	str.w	r3, [r9]
 800271c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002720:	460c      	mov	r4, r1
 8002722:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002726:	b112      	cbz	r2, 800272e <_printf_common+0x2a>
 8002728:	3301      	adds	r3, #1
 800272a:	f8c9 3000 	str.w	r3, [r9]
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	0699      	lsls	r1, r3, #26
 8002732:	bf42      	ittt	mi
 8002734:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002738:	3302      	addmi	r3, #2
 800273a:	f8c9 3000 	strmi.w	r3, [r9]
 800273e:	6825      	ldr	r5, [r4, #0]
 8002740:	f015 0506 	ands.w	r5, r5, #6
 8002744:	d107      	bne.n	8002756 <_printf_common+0x52>
 8002746:	f104 0a19 	add.w	sl, r4, #25
 800274a:	68e3      	ldr	r3, [r4, #12]
 800274c:	f8d9 2000 	ldr.w	r2, [r9]
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	429d      	cmp	r5, r3
 8002754:	db2a      	blt.n	80027ac <_printf_common+0xa8>
 8002756:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800275a:	6822      	ldr	r2, [r4, #0]
 800275c:	3300      	adds	r3, #0
 800275e:	bf18      	it	ne
 8002760:	2301      	movne	r3, #1
 8002762:	0692      	lsls	r2, r2, #26
 8002764:	d42f      	bmi.n	80027c6 <_printf_common+0xc2>
 8002766:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800276a:	4639      	mov	r1, r7
 800276c:	4630      	mov	r0, r6
 800276e:	47c0      	blx	r8
 8002770:	3001      	adds	r0, #1
 8002772:	d022      	beq.n	80027ba <_printf_common+0xb6>
 8002774:	6823      	ldr	r3, [r4, #0]
 8002776:	68e5      	ldr	r5, [r4, #12]
 8002778:	f003 0306 	and.w	r3, r3, #6
 800277c:	2b04      	cmp	r3, #4
 800277e:	bf18      	it	ne
 8002780:	2500      	movne	r5, #0
 8002782:	f8d9 2000 	ldr.w	r2, [r9]
 8002786:	f04f 0900 	mov.w	r9, #0
 800278a:	bf08      	it	eq
 800278c:	1aad      	subeq	r5, r5, r2
 800278e:	68a3      	ldr	r3, [r4, #8]
 8002790:	6922      	ldr	r2, [r4, #16]
 8002792:	bf08      	it	eq
 8002794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002798:	4293      	cmp	r3, r2
 800279a:	bfc4      	itt	gt
 800279c:	1a9b      	subgt	r3, r3, r2
 800279e:	18ed      	addgt	r5, r5, r3
 80027a0:	341a      	adds	r4, #26
 80027a2:	454d      	cmp	r5, r9
 80027a4:	d11b      	bne.n	80027de <_printf_common+0xda>
 80027a6:	2000      	movs	r0, #0
 80027a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ac:	2301      	movs	r3, #1
 80027ae:	4652      	mov	r2, sl
 80027b0:	4639      	mov	r1, r7
 80027b2:	4630      	mov	r0, r6
 80027b4:	47c0      	blx	r8
 80027b6:	3001      	adds	r0, #1
 80027b8:	d103      	bne.n	80027c2 <_printf_common+0xbe>
 80027ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027c2:	3501      	adds	r5, #1
 80027c4:	e7c1      	b.n	800274a <_printf_common+0x46>
 80027c6:	2030      	movs	r0, #48	; 0x30
 80027c8:	18e1      	adds	r1, r4, r3
 80027ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80027d4:	4422      	add	r2, r4
 80027d6:	3302      	adds	r3, #2
 80027d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80027dc:	e7c3      	b.n	8002766 <_printf_common+0x62>
 80027de:	2301      	movs	r3, #1
 80027e0:	4622      	mov	r2, r4
 80027e2:	4639      	mov	r1, r7
 80027e4:	4630      	mov	r0, r6
 80027e6:	47c0      	blx	r8
 80027e8:	3001      	adds	r0, #1
 80027ea:	d0e6      	beq.n	80027ba <_printf_common+0xb6>
 80027ec:	f109 0901 	add.w	r9, r9, #1
 80027f0:	e7d7      	b.n	80027a2 <_printf_common+0x9e>
	...

080027f4 <_printf_i>:
 80027f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027f8:	4617      	mov	r7, r2
 80027fa:	7e0a      	ldrb	r2, [r1, #24]
 80027fc:	b085      	sub	sp, #20
 80027fe:	2a6e      	cmp	r2, #110	; 0x6e
 8002800:	4698      	mov	r8, r3
 8002802:	4606      	mov	r6, r0
 8002804:	460c      	mov	r4, r1
 8002806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002808:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800280c:	f000 80bc 	beq.w	8002988 <_printf_i+0x194>
 8002810:	d81a      	bhi.n	8002848 <_printf_i+0x54>
 8002812:	2a63      	cmp	r2, #99	; 0x63
 8002814:	d02e      	beq.n	8002874 <_printf_i+0x80>
 8002816:	d80a      	bhi.n	800282e <_printf_i+0x3a>
 8002818:	2a00      	cmp	r2, #0
 800281a:	f000 80c8 	beq.w	80029ae <_printf_i+0x1ba>
 800281e:	2a58      	cmp	r2, #88	; 0x58
 8002820:	f000 808a 	beq.w	8002938 <_printf_i+0x144>
 8002824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002828:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800282c:	e02a      	b.n	8002884 <_printf_i+0x90>
 800282e:	2a64      	cmp	r2, #100	; 0x64
 8002830:	d001      	beq.n	8002836 <_printf_i+0x42>
 8002832:	2a69      	cmp	r2, #105	; 0x69
 8002834:	d1f6      	bne.n	8002824 <_printf_i+0x30>
 8002836:	6821      	ldr	r1, [r4, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800283e:	d023      	beq.n	8002888 <_printf_i+0x94>
 8002840:	1d11      	adds	r1, r2, #4
 8002842:	6019      	str	r1, [r3, #0]
 8002844:	6813      	ldr	r3, [r2, #0]
 8002846:	e027      	b.n	8002898 <_printf_i+0xa4>
 8002848:	2a73      	cmp	r2, #115	; 0x73
 800284a:	f000 80b4 	beq.w	80029b6 <_printf_i+0x1c2>
 800284e:	d808      	bhi.n	8002862 <_printf_i+0x6e>
 8002850:	2a6f      	cmp	r2, #111	; 0x6f
 8002852:	d02a      	beq.n	80028aa <_printf_i+0xb6>
 8002854:	2a70      	cmp	r2, #112	; 0x70
 8002856:	d1e5      	bne.n	8002824 <_printf_i+0x30>
 8002858:	680a      	ldr	r2, [r1, #0]
 800285a:	f042 0220 	orr.w	r2, r2, #32
 800285e:	600a      	str	r2, [r1, #0]
 8002860:	e003      	b.n	800286a <_printf_i+0x76>
 8002862:	2a75      	cmp	r2, #117	; 0x75
 8002864:	d021      	beq.n	80028aa <_printf_i+0xb6>
 8002866:	2a78      	cmp	r2, #120	; 0x78
 8002868:	d1dc      	bne.n	8002824 <_printf_i+0x30>
 800286a:	2278      	movs	r2, #120	; 0x78
 800286c:	496f      	ldr	r1, [pc, #444]	; (8002a2c <_printf_i+0x238>)
 800286e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002872:	e064      	b.n	800293e <_printf_i+0x14a>
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800287a:	1d11      	adds	r1, r2, #4
 800287c:	6019      	str	r1, [r3, #0]
 800287e:	6813      	ldr	r3, [r2, #0]
 8002880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002884:	2301      	movs	r3, #1
 8002886:	e0a3      	b.n	80029d0 <_printf_i+0x1dc>
 8002888:	f011 0f40 	tst.w	r1, #64	; 0x40
 800288c:	f102 0104 	add.w	r1, r2, #4
 8002890:	6019      	str	r1, [r3, #0]
 8002892:	d0d7      	beq.n	8002844 <_printf_i+0x50>
 8002894:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002898:	2b00      	cmp	r3, #0
 800289a:	da03      	bge.n	80028a4 <_printf_i+0xb0>
 800289c:	222d      	movs	r2, #45	; 0x2d
 800289e:	425b      	negs	r3, r3
 80028a0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80028a4:	4962      	ldr	r1, [pc, #392]	; (8002a30 <_printf_i+0x23c>)
 80028a6:	220a      	movs	r2, #10
 80028a8:	e017      	b.n	80028da <_printf_i+0xe6>
 80028aa:	6820      	ldr	r0, [r4, #0]
 80028ac:	6819      	ldr	r1, [r3, #0]
 80028ae:	f010 0f80 	tst.w	r0, #128	; 0x80
 80028b2:	d003      	beq.n	80028bc <_printf_i+0xc8>
 80028b4:	1d08      	adds	r0, r1, #4
 80028b6:	6018      	str	r0, [r3, #0]
 80028b8:	680b      	ldr	r3, [r1, #0]
 80028ba:	e006      	b.n	80028ca <_printf_i+0xd6>
 80028bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028c0:	f101 0004 	add.w	r0, r1, #4
 80028c4:	6018      	str	r0, [r3, #0]
 80028c6:	d0f7      	beq.n	80028b8 <_printf_i+0xc4>
 80028c8:	880b      	ldrh	r3, [r1, #0]
 80028ca:	2a6f      	cmp	r2, #111	; 0x6f
 80028cc:	bf14      	ite	ne
 80028ce:	220a      	movne	r2, #10
 80028d0:	2208      	moveq	r2, #8
 80028d2:	4957      	ldr	r1, [pc, #348]	; (8002a30 <_printf_i+0x23c>)
 80028d4:	2000      	movs	r0, #0
 80028d6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80028da:	6865      	ldr	r5, [r4, #4]
 80028dc:	2d00      	cmp	r5, #0
 80028de:	60a5      	str	r5, [r4, #8]
 80028e0:	f2c0 809c 	blt.w	8002a1c <_printf_i+0x228>
 80028e4:	6820      	ldr	r0, [r4, #0]
 80028e6:	f020 0004 	bic.w	r0, r0, #4
 80028ea:	6020      	str	r0, [r4, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d13f      	bne.n	8002970 <_printf_i+0x17c>
 80028f0:	2d00      	cmp	r5, #0
 80028f2:	f040 8095 	bne.w	8002a20 <_printf_i+0x22c>
 80028f6:	4675      	mov	r5, lr
 80028f8:	2a08      	cmp	r2, #8
 80028fa:	d10b      	bne.n	8002914 <_printf_i+0x120>
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	07da      	lsls	r2, r3, #31
 8002900:	d508      	bpl.n	8002914 <_printf_i+0x120>
 8002902:	6923      	ldr	r3, [r4, #16]
 8002904:	6862      	ldr	r2, [r4, #4]
 8002906:	429a      	cmp	r2, r3
 8002908:	bfde      	ittt	le
 800290a:	2330      	movle	r3, #48	; 0x30
 800290c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002910:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002914:	ebae 0305 	sub.w	r3, lr, r5
 8002918:	6123      	str	r3, [r4, #16]
 800291a:	f8cd 8000 	str.w	r8, [sp]
 800291e:	463b      	mov	r3, r7
 8002920:	aa03      	add	r2, sp, #12
 8002922:	4621      	mov	r1, r4
 8002924:	4630      	mov	r0, r6
 8002926:	f7ff feed 	bl	8002704 <_printf_common>
 800292a:	3001      	adds	r0, #1
 800292c:	d155      	bne.n	80029da <_printf_i+0x1e6>
 800292e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002932:	b005      	add	sp, #20
 8002934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002938:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800293c:	493c      	ldr	r1, [pc, #240]	; (8002a30 <_printf_i+0x23c>)
 800293e:	6822      	ldr	r2, [r4, #0]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002946:	f100 0504 	add.w	r5, r0, #4
 800294a:	601d      	str	r5, [r3, #0]
 800294c:	d001      	beq.n	8002952 <_printf_i+0x15e>
 800294e:	6803      	ldr	r3, [r0, #0]
 8002950:	e002      	b.n	8002958 <_printf_i+0x164>
 8002952:	0655      	lsls	r5, r2, #25
 8002954:	d5fb      	bpl.n	800294e <_printf_i+0x15a>
 8002956:	8803      	ldrh	r3, [r0, #0]
 8002958:	07d0      	lsls	r0, r2, #31
 800295a:	bf44      	itt	mi
 800295c:	f042 0220 	orrmi.w	r2, r2, #32
 8002960:	6022      	strmi	r2, [r4, #0]
 8002962:	b91b      	cbnz	r3, 800296c <_printf_i+0x178>
 8002964:	6822      	ldr	r2, [r4, #0]
 8002966:	f022 0220 	bic.w	r2, r2, #32
 800296a:	6022      	str	r2, [r4, #0]
 800296c:	2210      	movs	r2, #16
 800296e:	e7b1      	b.n	80028d4 <_printf_i+0xe0>
 8002970:	4675      	mov	r5, lr
 8002972:	fbb3 f0f2 	udiv	r0, r3, r2
 8002976:	fb02 3310 	mls	r3, r2, r0, r3
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002980:	4603      	mov	r3, r0
 8002982:	2800      	cmp	r0, #0
 8002984:	d1f5      	bne.n	8002972 <_printf_i+0x17e>
 8002986:	e7b7      	b.n	80028f8 <_printf_i+0x104>
 8002988:	6808      	ldr	r0, [r1, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002990:	6949      	ldr	r1, [r1, #20]
 8002992:	d004      	beq.n	800299e <_printf_i+0x1aa>
 8002994:	1d10      	adds	r0, r2, #4
 8002996:	6018      	str	r0, [r3, #0]
 8002998:	6813      	ldr	r3, [r2, #0]
 800299a:	6019      	str	r1, [r3, #0]
 800299c:	e007      	b.n	80029ae <_printf_i+0x1ba>
 800299e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80029a2:	f102 0004 	add.w	r0, r2, #4
 80029a6:	6018      	str	r0, [r3, #0]
 80029a8:	6813      	ldr	r3, [r2, #0]
 80029aa:	d0f6      	beq.n	800299a <_printf_i+0x1a6>
 80029ac:	8019      	strh	r1, [r3, #0]
 80029ae:	2300      	movs	r3, #0
 80029b0:	4675      	mov	r5, lr
 80029b2:	6123      	str	r3, [r4, #16]
 80029b4:	e7b1      	b.n	800291a <_printf_i+0x126>
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	1d11      	adds	r1, r2, #4
 80029ba:	6019      	str	r1, [r3, #0]
 80029bc:	6815      	ldr	r5, [r2, #0]
 80029be:	2100      	movs	r1, #0
 80029c0:	6862      	ldr	r2, [r4, #4]
 80029c2:	4628      	mov	r0, r5
 80029c4:	f000 f836 	bl	8002a34 <memchr>
 80029c8:	b108      	cbz	r0, 80029ce <_printf_i+0x1da>
 80029ca:	1b40      	subs	r0, r0, r5
 80029cc:	6060      	str	r0, [r4, #4]
 80029ce:	6863      	ldr	r3, [r4, #4]
 80029d0:	6123      	str	r3, [r4, #16]
 80029d2:	2300      	movs	r3, #0
 80029d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029d8:	e79f      	b.n	800291a <_printf_i+0x126>
 80029da:	6923      	ldr	r3, [r4, #16]
 80029dc:	462a      	mov	r2, r5
 80029de:	4639      	mov	r1, r7
 80029e0:	4630      	mov	r0, r6
 80029e2:	47c0      	blx	r8
 80029e4:	3001      	adds	r0, #1
 80029e6:	d0a2      	beq.n	800292e <_printf_i+0x13a>
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	079b      	lsls	r3, r3, #30
 80029ec:	d507      	bpl.n	80029fe <_printf_i+0x20a>
 80029ee:	2500      	movs	r5, #0
 80029f0:	f104 0919 	add.w	r9, r4, #25
 80029f4:	68e3      	ldr	r3, [r4, #12]
 80029f6:	9a03      	ldr	r2, [sp, #12]
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	429d      	cmp	r5, r3
 80029fc:	db05      	blt.n	8002a0a <_printf_i+0x216>
 80029fe:	68e0      	ldr	r0, [r4, #12]
 8002a00:	9b03      	ldr	r3, [sp, #12]
 8002a02:	4298      	cmp	r0, r3
 8002a04:	bfb8      	it	lt
 8002a06:	4618      	movlt	r0, r3
 8002a08:	e793      	b.n	8002932 <_printf_i+0x13e>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	464a      	mov	r2, r9
 8002a0e:	4639      	mov	r1, r7
 8002a10:	4630      	mov	r0, r6
 8002a12:	47c0      	blx	r8
 8002a14:	3001      	adds	r0, #1
 8002a16:	d08a      	beq.n	800292e <_printf_i+0x13a>
 8002a18:	3501      	adds	r5, #1
 8002a1a:	e7eb      	b.n	80029f4 <_printf_i+0x200>
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1a7      	bne.n	8002970 <_printf_i+0x17c>
 8002a20:	780b      	ldrb	r3, [r1, #0]
 8002a22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a2a:	e765      	b.n	80028f8 <_printf_i+0x104>
 8002a2c:	08002d4d 	.word	0x08002d4d
 8002a30:	08002d3c 	.word	0x08002d3c

08002a34 <memchr>:
 8002a34:	b510      	push	{r4, lr}
 8002a36:	b2c9      	uxtb	r1, r1
 8002a38:	4402      	add	r2, r0
 8002a3a:	4290      	cmp	r0, r2
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	d101      	bne.n	8002a44 <memchr+0x10>
 8002a40:	2000      	movs	r0, #0
 8002a42:	bd10      	pop	{r4, pc}
 8002a44:	781c      	ldrb	r4, [r3, #0]
 8002a46:	3001      	adds	r0, #1
 8002a48:	428c      	cmp	r4, r1
 8002a4a:	d1f6      	bne.n	8002a3a <memchr+0x6>
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd10      	pop	{r4, pc}

08002a50 <memmove>:
 8002a50:	4288      	cmp	r0, r1
 8002a52:	b510      	push	{r4, lr}
 8002a54:	eb01 0302 	add.w	r3, r1, r2
 8002a58:	d803      	bhi.n	8002a62 <memmove+0x12>
 8002a5a:	1e42      	subs	r2, r0, #1
 8002a5c:	4299      	cmp	r1, r3
 8002a5e:	d10c      	bne.n	8002a7a <memmove+0x2a>
 8002a60:	bd10      	pop	{r4, pc}
 8002a62:	4298      	cmp	r0, r3
 8002a64:	d2f9      	bcs.n	8002a5a <memmove+0xa>
 8002a66:	1881      	adds	r1, r0, r2
 8002a68:	1ad2      	subs	r2, r2, r3
 8002a6a:	42d3      	cmn	r3, r2
 8002a6c:	d100      	bne.n	8002a70 <memmove+0x20>
 8002a6e:	bd10      	pop	{r4, pc}
 8002a70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a74:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002a78:	e7f7      	b.n	8002a6a <memmove+0x1a>
 8002a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a7e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002a82:	e7eb      	b.n	8002a5c <memmove+0xc>

08002a84 <_free_r>:
 8002a84:	b538      	push	{r3, r4, r5, lr}
 8002a86:	4605      	mov	r5, r0
 8002a88:	2900      	cmp	r1, #0
 8002a8a:	d043      	beq.n	8002b14 <_free_r+0x90>
 8002a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a90:	1f0c      	subs	r4, r1, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bfb8      	it	lt
 8002a96:	18e4      	addlt	r4, r4, r3
 8002a98:	f000 f8d4 	bl	8002c44 <__malloc_lock>
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <_free_r+0x94>)
 8002a9e:	6813      	ldr	r3, [r2, #0]
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	b933      	cbnz	r3, 8002ab2 <_free_r+0x2e>
 8002aa4:	6063      	str	r3, [r4, #4]
 8002aa6:	6014      	str	r4, [r2, #0]
 8002aa8:	4628      	mov	r0, r5
 8002aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002aae:	f000 b8ca 	b.w	8002c46 <__malloc_unlock>
 8002ab2:	42a3      	cmp	r3, r4
 8002ab4:	d90b      	bls.n	8002ace <_free_r+0x4a>
 8002ab6:	6821      	ldr	r1, [r4, #0]
 8002ab8:	1862      	adds	r2, r4, r1
 8002aba:	4293      	cmp	r3, r2
 8002abc:	bf01      	itttt	eq
 8002abe:	681a      	ldreq	r2, [r3, #0]
 8002ac0:	685b      	ldreq	r3, [r3, #4]
 8002ac2:	1852      	addeq	r2, r2, r1
 8002ac4:	6022      	streq	r2, [r4, #0]
 8002ac6:	6063      	str	r3, [r4, #4]
 8002ac8:	6004      	str	r4, [r0, #0]
 8002aca:	e7ed      	b.n	8002aa8 <_free_r+0x24>
 8002acc:	4613      	mov	r3, r2
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	b10a      	cbz	r2, 8002ad6 <_free_r+0x52>
 8002ad2:	42a2      	cmp	r2, r4
 8002ad4:	d9fa      	bls.n	8002acc <_free_r+0x48>
 8002ad6:	6819      	ldr	r1, [r3, #0]
 8002ad8:	1858      	adds	r0, r3, r1
 8002ada:	42a0      	cmp	r0, r4
 8002adc:	d10b      	bne.n	8002af6 <_free_r+0x72>
 8002ade:	6820      	ldr	r0, [r4, #0]
 8002ae0:	4401      	add	r1, r0
 8002ae2:	1858      	adds	r0, r3, r1
 8002ae4:	4282      	cmp	r2, r0
 8002ae6:	6019      	str	r1, [r3, #0]
 8002ae8:	d1de      	bne.n	8002aa8 <_free_r+0x24>
 8002aea:	6810      	ldr	r0, [r2, #0]
 8002aec:	6852      	ldr	r2, [r2, #4]
 8002aee:	4401      	add	r1, r0
 8002af0:	6019      	str	r1, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	e7d8      	b.n	8002aa8 <_free_r+0x24>
 8002af6:	d902      	bls.n	8002afe <_free_r+0x7a>
 8002af8:	230c      	movs	r3, #12
 8002afa:	602b      	str	r3, [r5, #0]
 8002afc:	e7d4      	b.n	8002aa8 <_free_r+0x24>
 8002afe:	6820      	ldr	r0, [r4, #0]
 8002b00:	1821      	adds	r1, r4, r0
 8002b02:	428a      	cmp	r2, r1
 8002b04:	bf01      	itttt	eq
 8002b06:	6811      	ldreq	r1, [r2, #0]
 8002b08:	6852      	ldreq	r2, [r2, #4]
 8002b0a:	1809      	addeq	r1, r1, r0
 8002b0c:	6021      	streq	r1, [r4, #0]
 8002b0e:	6062      	str	r2, [r4, #4]
 8002b10:	605c      	str	r4, [r3, #4]
 8002b12:	e7c9      	b.n	8002aa8 <_free_r+0x24>
 8002b14:	bd38      	pop	{r3, r4, r5, pc}
 8002b16:	bf00      	nop
 8002b18:	20000dd8 	.word	0x20000dd8

08002b1c <_malloc_r>:
 8002b1c:	b570      	push	{r4, r5, r6, lr}
 8002b1e:	1ccd      	adds	r5, r1, #3
 8002b20:	f025 0503 	bic.w	r5, r5, #3
 8002b24:	3508      	adds	r5, #8
 8002b26:	2d0c      	cmp	r5, #12
 8002b28:	bf38      	it	cc
 8002b2a:	250c      	movcc	r5, #12
 8002b2c:	2d00      	cmp	r5, #0
 8002b2e:	4606      	mov	r6, r0
 8002b30:	db01      	blt.n	8002b36 <_malloc_r+0x1a>
 8002b32:	42a9      	cmp	r1, r5
 8002b34:	d903      	bls.n	8002b3e <_malloc_r+0x22>
 8002b36:	230c      	movs	r3, #12
 8002b38:	6033      	str	r3, [r6, #0]
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	bd70      	pop	{r4, r5, r6, pc}
 8002b3e:	f000 f881 	bl	8002c44 <__malloc_lock>
 8002b42:	4a23      	ldr	r2, [pc, #140]	; (8002bd0 <_malloc_r+0xb4>)
 8002b44:	6814      	ldr	r4, [r2, #0]
 8002b46:	4621      	mov	r1, r4
 8002b48:	b991      	cbnz	r1, 8002b70 <_malloc_r+0x54>
 8002b4a:	4c22      	ldr	r4, [pc, #136]	; (8002bd4 <_malloc_r+0xb8>)
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	b91b      	cbnz	r3, 8002b58 <_malloc_r+0x3c>
 8002b50:	4630      	mov	r0, r6
 8002b52:	f000 f867 	bl	8002c24 <_sbrk_r>
 8002b56:	6020      	str	r0, [r4, #0]
 8002b58:	4629      	mov	r1, r5
 8002b5a:	4630      	mov	r0, r6
 8002b5c:	f000 f862 	bl	8002c24 <_sbrk_r>
 8002b60:	1c43      	adds	r3, r0, #1
 8002b62:	d126      	bne.n	8002bb2 <_malloc_r+0x96>
 8002b64:	230c      	movs	r3, #12
 8002b66:	4630      	mov	r0, r6
 8002b68:	6033      	str	r3, [r6, #0]
 8002b6a:	f000 f86c 	bl	8002c46 <__malloc_unlock>
 8002b6e:	e7e4      	b.n	8002b3a <_malloc_r+0x1e>
 8002b70:	680b      	ldr	r3, [r1, #0]
 8002b72:	1b5b      	subs	r3, r3, r5
 8002b74:	d41a      	bmi.n	8002bac <_malloc_r+0x90>
 8002b76:	2b0b      	cmp	r3, #11
 8002b78:	d90f      	bls.n	8002b9a <_malloc_r+0x7e>
 8002b7a:	600b      	str	r3, [r1, #0]
 8002b7c:	18cc      	adds	r4, r1, r3
 8002b7e:	50cd      	str	r5, [r1, r3]
 8002b80:	4630      	mov	r0, r6
 8002b82:	f000 f860 	bl	8002c46 <__malloc_unlock>
 8002b86:	f104 000b 	add.w	r0, r4, #11
 8002b8a:	1d23      	adds	r3, r4, #4
 8002b8c:	f020 0007 	bic.w	r0, r0, #7
 8002b90:	1ac3      	subs	r3, r0, r3
 8002b92:	d01b      	beq.n	8002bcc <_malloc_r+0xb0>
 8002b94:	425a      	negs	r2, r3
 8002b96:	50e2      	str	r2, [r4, r3]
 8002b98:	bd70      	pop	{r4, r5, r6, pc}
 8002b9a:	428c      	cmp	r4, r1
 8002b9c:	bf0b      	itete	eq
 8002b9e:	6863      	ldreq	r3, [r4, #4]
 8002ba0:	684b      	ldrne	r3, [r1, #4]
 8002ba2:	6013      	streq	r3, [r2, #0]
 8002ba4:	6063      	strne	r3, [r4, #4]
 8002ba6:	bf18      	it	ne
 8002ba8:	460c      	movne	r4, r1
 8002baa:	e7e9      	b.n	8002b80 <_malloc_r+0x64>
 8002bac:	460c      	mov	r4, r1
 8002bae:	6849      	ldr	r1, [r1, #4]
 8002bb0:	e7ca      	b.n	8002b48 <_malloc_r+0x2c>
 8002bb2:	1cc4      	adds	r4, r0, #3
 8002bb4:	f024 0403 	bic.w	r4, r4, #3
 8002bb8:	42a0      	cmp	r0, r4
 8002bba:	d005      	beq.n	8002bc8 <_malloc_r+0xac>
 8002bbc:	1a21      	subs	r1, r4, r0
 8002bbe:	4630      	mov	r0, r6
 8002bc0:	f000 f830 	bl	8002c24 <_sbrk_r>
 8002bc4:	3001      	adds	r0, #1
 8002bc6:	d0cd      	beq.n	8002b64 <_malloc_r+0x48>
 8002bc8:	6025      	str	r5, [r4, #0]
 8002bca:	e7d9      	b.n	8002b80 <_malloc_r+0x64>
 8002bcc:	bd70      	pop	{r4, r5, r6, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000dd8 	.word	0x20000dd8
 8002bd4:	20000ddc 	.word	0x20000ddc

08002bd8 <_realloc_r>:
 8002bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bda:	4607      	mov	r7, r0
 8002bdc:	4614      	mov	r4, r2
 8002bde:	460e      	mov	r6, r1
 8002be0:	b921      	cbnz	r1, 8002bec <_realloc_r+0x14>
 8002be2:	4611      	mov	r1, r2
 8002be4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002be8:	f7ff bf98 	b.w	8002b1c <_malloc_r>
 8002bec:	b922      	cbnz	r2, 8002bf8 <_realloc_r+0x20>
 8002bee:	f7ff ff49 	bl	8002a84 <_free_r>
 8002bf2:	4625      	mov	r5, r4
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bf8:	f000 f826 	bl	8002c48 <_malloc_usable_size_r>
 8002bfc:	4284      	cmp	r4, r0
 8002bfe:	d90f      	bls.n	8002c20 <_realloc_r+0x48>
 8002c00:	4621      	mov	r1, r4
 8002c02:	4638      	mov	r0, r7
 8002c04:	f7ff ff8a 	bl	8002b1c <_malloc_r>
 8002c08:	4605      	mov	r5, r0
 8002c0a:	2800      	cmp	r0, #0
 8002c0c:	d0f2      	beq.n	8002bf4 <_realloc_r+0x1c>
 8002c0e:	4631      	mov	r1, r6
 8002c10:	4622      	mov	r2, r4
 8002c12:	f7ff fbf9 	bl	8002408 <memcpy>
 8002c16:	4631      	mov	r1, r6
 8002c18:	4638      	mov	r0, r7
 8002c1a:	f7ff ff33 	bl	8002a84 <_free_r>
 8002c1e:	e7e9      	b.n	8002bf4 <_realloc_r+0x1c>
 8002c20:	4635      	mov	r5, r6
 8002c22:	e7e7      	b.n	8002bf4 <_realloc_r+0x1c>

08002c24 <_sbrk_r>:
 8002c24:	b538      	push	{r3, r4, r5, lr}
 8002c26:	2300      	movs	r3, #0
 8002c28:	4c05      	ldr	r4, [pc, #20]	; (8002c40 <_sbrk_r+0x1c>)
 8002c2a:	4605      	mov	r5, r0
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	6023      	str	r3, [r4, #0]
 8002c30:	f000 f814 	bl	8002c5c <_sbrk>
 8002c34:	1c43      	adds	r3, r0, #1
 8002c36:	d102      	bne.n	8002c3e <_sbrk_r+0x1a>
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	b103      	cbz	r3, 8002c3e <_sbrk_r+0x1a>
 8002c3c:	602b      	str	r3, [r5, #0]
 8002c3e:	bd38      	pop	{r3, r4, r5, pc}
 8002c40:	20000e68 	.word	0x20000e68

08002c44 <__malloc_lock>:
 8002c44:	4770      	bx	lr

08002c46 <__malloc_unlock>:
 8002c46:	4770      	bx	lr

08002c48 <_malloc_usable_size_r>:
 8002c48:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002c4c:	2800      	cmp	r0, #0
 8002c4e:	f1a0 0004 	sub.w	r0, r0, #4
 8002c52:	bfbc      	itt	lt
 8002c54:	580b      	ldrlt	r3, [r1, r0]
 8002c56:	18c0      	addlt	r0, r0, r3
 8002c58:	4770      	bx	lr
	...

08002c5c <_sbrk>:
 8002c5c:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <_sbrk+0x14>)
 8002c5e:	4602      	mov	r2, r0
 8002c60:	6819      	ldr	r1, [r3, #0]
 8002c62:	b909      	cbnz	r1, 8002c68 <_sbrk+0xc>
 8002c64:	4903      	ldr	r1, [pc, #12]	; (8002c74 <_sbrk+0x18>)
 8002c66:	6019      	str	r1, [r3, #0]
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	4402      	add	r2, r0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	4770      	bx	lr
 8002c70:	20000de0 	.word	0x20000de0
 8002c74:	20000e6c 	.word	0x20000e6c

08002c78 <_init>:
 8002c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7a:	bf00      	nop
 8002c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7e:	bc08      	pop	{r3}
 8002c80:	469e      	mov	lr, r3
 8002c82:	4770      	bx	lr

08002c84 <_fini>:
 8002c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c86:	bf00      	nop
 8002c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8a:	bc08      	pop	{r3}
 8002c8c:	469e      	mov	lr, r3
 8002c8e:	4770      	bx	lr
